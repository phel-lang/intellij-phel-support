// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/kotlin/org/phellang/language/Phel.flex

package org.phellang.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.phellang.language.psi.PhelTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


public class PhelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SYMBOL0 = 2;
  public static final int SYMBOL1 = 4;
  public static final int SYMBOL2 = 6;
  public static final int SYMBOL3 = 8;
  public static final int MULTILINE_COMMENT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\2\6\1\7\1\10\1\11\1\12\1\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\6\22\2\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\6\1\31\1\32\3\33"+
    "\1\34\1\33\7\6\1\35\14\6\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\2\6\1\52\1\6\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\6\1\61\1\62\1\63\1\64\1\6"+
    "\1\65\1\66\2\6\1\67\1\70\1\71\1\72\6\0"+
    "\1\2\32\0\1\1\11\0\1\6\12\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0"+
    "\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0"+
    "\165\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0"+
    "\123\6\1\0\213\6\1\0\255\6\1\0\46\6\2\0"+
    "\1\6\6\0\51\6\10\0\55\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\6\10\0\33\6\4\0"+
    "\4\6\35\0\13\6\5\0\100\6\12\73\4\0\146\6"+
    "\1\0\10\6\2\0\12\6\1\0\6\6\12\73\3\6"+
    "\2\0\1\6\20\0\73\6\2\0\145\6\16\0\12\73"+
    "\54\6\4\0\1\6\2\0\1\6\2\0\56\6\22\0"+
    "\34\6\4\0\13\6\65\0\25\6\1\0\10\6\25\0"+
    "\17\6\1\0\201\6\2\0\12\73\1\0\23\6\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\1\6\3\0\4\6\2\0\11\6\2\0\2\6\2\0"+
    "\4\6\10\0\1\6\4\0\2\6\1\0\5\6\2\0"+
    "\12\73\2\6\12\0\1\6\1\0\1\6\2\0\3\6"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\6"+
    "\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1\6"+
    "\7\0\4\6\1\0\1\6\7\0\12\73\6\6\13\0"+
    "\3\6\1\0\11\6\1\0\3\6\1\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\12\6\1\0"+
    "\3\6\1\0\3\6\2\0\1\6\17\0\4\6\2\0"+
    "\12\73\11\0\7\6\1\0\3\6\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\11\6\2\0\2\6\2\0\3\6\10\0"+
    "\2\6\4\0\2\6\1\0\5\6\2\0\12\73\1\0"+
    "\1\6\20\0\2\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\14\6\4\0\5\6\3\0"+
    "\3\6\1\0\4\6\2\0\1\6\6\0\1\6\16\0"+
    "\12\73\20\0\15\6\1\0\3\6\1\0\27\6\1\0"+
    "\20\6\3\0\10\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\1\0\3\6\5\0\4\6\2\0\12\73\20\0"+
    "\4\6\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\2\0\11\6\1\0\3\6\1\0"+
    "\4\6\7\0\2\6\7\0\1\6\1\0\4\6\2\0"+
    "\12\73\1\0\2\6\15\0\4\6\1\0\10\6\1\0"+
    "\3\6\1\0\63\6\1\0\3\6\1\0\5\6\5\0"+
    "\4\6\7\0\5\6\2\0\12\73\12\0\6\6\2\0"+
    "\2\6\1\0\22\6\3\0\30\6\1\0\11\6\1\0"+
    "\1\6\2\0\7\6\3\0\1\6\4\0\6\6\1\0"+
    "\1\6\1\0\10\6\6\0\12\73\2\0\2\6\15\0"+
    "\72\6\5\0\17\6\1\0\12\73\47\0\2\6\1\0"+
    "\1\6\1\0\5\6\1\0\30\6\1\0\1\6\1\0"+
    "\27\6\2\0\5\6\1\0\1\6\1\0\6\6\2\0"+
    "\12\73\2\0\4\6\40\0\1\6\27\0\2\6\6\0"+
    "\12\73\13\0\1\6\1\0\1\6\1\0\1\6\4\0"+
    "\12\6\1\0\44\6\4\0\24\6\1\0\22\6\1\0"+
    "\44\6\11\0\1\6\71\0\100\6\12\73\6\0\100\6"+
    "\12\73\4\6\2\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\53\6\1\0\115\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6"+
    "\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6"+
    "\2\0\103\6\2\0\3\6\40\0\20\6\20\0\126\6"+
    "\2\0\6\6\3\0\u016c\6\2\0\21\6\1\1\32\6"+
    "\5\0\113\6\3\0\13\6\7\0\15\6\1\0\7\6"+
    "\13\0\25\6\13\0\24\6\14\0\15\6\1\0\3\6"+
    "\1\0\2\6\14\0\124\6\3\0\1\6\4\0\2\6"+
    "\2\0\12\73\41\0\3\6\2\0\12\73\6\0\131\6"+
    "\7\0\53\6\5\0\106\6\12\0\37\6\1\0\14\6"+
    "\4\0\14\6\12\0\12\73\36\6\2\0\5\6\13\0"+
    "\54\6\4\0\32\6\6\0\12\73\46\0\34\6\4\0"+
    "\77\6\1\0\35\6\2\0\1\6\12\73\6\0\12\73"+
    "\15\0\1\6\10\0\17\6\101\0\114\6\4\0\12\73"+
    "\21\0\11\6\14\0\60\6\12\73\72\6\14\0\70\6"+
    "\10\0\12\73\3\0\3\6\12\73\44\6\2\0\11\6"+
    "\7\0\53\6\2\0\3\6\20\0\3\6\1\0\47\6"+
    "\5\0\372\6\1\0\33\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\3\0\13\1\35\0\2\2\5\0\1\1\17\0\2\6"+
    "\23\0\1\6\12\0\1\1\21\0\1\6\15\0\1\6"+
    "\20\0\15\6\63\0\41\6\21\0\1\6\4\0\1\6"+
    "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6"+
    "\u022d\0\64\6\26\0\57\6\1\0\57\6\1\0\205\6"+
    "\6\0\11\6\14\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\70\6\7\0\1\6\17\0\30\6\11\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\6"+
    "\57\0\1\6\320\0\1\1\4\0\3\6\31\0\17\6"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\6"+
    "\2\0\3\6\1\0\132\6\1\0\4\6\5\0\53\6"+
    "\1\0\136\6\21\0\33\6\65\0\306\6\112\0\360\6"+
    "\20\0\215\6\103\0\56\6\2\0\15\6\3\0\20\6"+
    "\12\73\2\6\24\0\63\6\1\0\12\6\1\0\163\6"+
    "\45\0\11\6\2\0\147\6\2\0\65\6\2\0\5\6"+
    "\60\0\61\6\30\0\64\6\14\0\106\6\12\0\12\73"+
    "\6\0\30\6\3\0\1\6\1\0\3\6\12\73\44\6"+
    "\2\0\44\6\14\0\35\6\3\0\101\6\16\0\1\6"+
    "\12\73\6\0\20\6\12\73\5\6\1\0\67\6\11\0"+
    "\16\6\2\0\12\73\6\0\27\6\3\0\111\6\30\0"+
    "\3\6\2\0\20\6\2\0\5\6\12\0\6\6\2\0"+
    "\6\6\2\0\6\6\11\0\7\6\1\0\7\6\1\0"+
    "\53\6\1\0\14\6\10\0\173\6\1\0\2\6\2\0"+
    "\12\73\6\0\244\6\14\0\27\6\4\0\61\6\4\0"+
    "\u0100\74\156\6\2\0\152\6\46\0\7\6\14\0\5\6"+
    "\5\0\14\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\153\6"+
    "\22\0\100\6\2\0\66\6\50\0\14\6\4\0\20\6"+
    "\20\0\20\6\3\0\2\6\30\0\3\6\40\0\5\6"+
    "\1\0\207\6\23\0\12\73\7\0\32\6\4\0\1\6"+
    "\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6"+
    "\2\0\6\6\2\0\3\6\43\0\14\6\1\0\32\6"+
    "\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6"+
    "\42\0\173\6\105\0\65\6\210\0\1\6\202\0\35\6"+
    "\3\0\61\6\17\0\1\6\37\0\40\6\15\0\36\6"+
    "\5\0\53\6\5\0\36\6\2\0\44\6\4\0\10\6"+
    "\1\0\5\6\52\0\236\6\2\0\12\73\6\0\44\6"+
    "\4\0\44\6\4\0\50\6\10\0\64\6\234\0\67\6"+
    "\11\0\26\6\12\0\10\6\230\0\6\6\2\0\1\6"+
    "\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6"+
    "\12\0\27\6\11\0\37\6\101\0\23\6\1\0\2\6"+
    "\12\0\26\6\12\0\32\6\106\0\70\6\6\0\2\6"+
    "\100\0\4\6\1\0\2\6\5\0\10\6\1\0\3\6"+
    "\1\0\35\6\2\0\3\6\4\0\1\6\40\0\35\6"+
    "\3\0\35\6\43\0\10\6\1\0\36\6\31\0\66\6"+
    "\12\0\26\6\12\0\23\6\15\0\22\6\156\0\111\6"+
    "\67\0\63\6\15\0\63\6\15\0\50\6\10\0\12\73"+
    "\306\0\35\6\12\0\1\6\10\0\41\6\217\0\27\6"+
    "\11\0\107\6\37\0\12\73\17\0\74\6\25\0\31\6"+
    "\7\0\12\73\6\0\65\6\1\0\12\73\4\0\3\6"+
    "\11\0\44\6\2\0\1\6\11\0\105\6\4\0\4\6"+
    "\3\0\12\73\1\6\1\0\1\6\43\0\22\6\1\0"+
    "\45\6\6\0\1\6\101\0\7\6\1\0\1\6\1\0"+
    "\4\6\1\0\17\6\1\0\12\6\7\0\73\6\5\0"+
    "\12\73\6\0\4\6\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\1\0"+
    "\12\6\2\0\2\6\2\0\3\6\2\0\1\6\6\0"+
    "\1\6\5\0\7\6\2\0\7\6\3\0\5\6\213\0"+
    "\113\6\5\0\12\73\4\0\2\6\40\0\106\6\1\0"+
    "\1\6\10\0\12\73\246\0\66\6\2\0\11\6\27\0"+
    "\6\6\42\0\101\6\3\0\1\6\13\0\12\73\46\0"+
    "\71\6\7\0\12\73\66\0\33\6\2\0\17\6\4\0"+
    "\12\73\306\0\73\6\145\0\100\6\12\73\25\0\1\6"+
    "\240\0\10\6\2\0\56\6\2\0\10\6\1\0\2\6"+
    "\33\0\77\6\10\0\1\6\10\0\112\6\3\0\1\6"+
    "\42\0\71\6\7\0\11\6\1\0\55\6\1\0\11\6"+
    "\17\0\12\73\30\0\36\6\2\0\26\6\1\0\16\6"+
    "\111\0\7\6\1\0\2\6\1\0\54\6\3\0\1\6"+
    "\1\0\2\6\1\0\11\6\10\0\12\73\6\0\6\6"+
    "\1\0\2\6\1\0\45\6\1\0\2\6\1\0\6\6"+
    "\7\0\12\73\u0136\0\27\6\11\0\232\6\146\0\157\6"+
    "\21\0\304\6\274\0\57\6\321\0\107\6\271\0\71\6"+
    "\7\0\37\6\1\0\12\73\146\0\36\6\2\0\5\6"+
    "\13\0\67\6\11\0\4\6\14\0\12\73\11\0\25\6"+
    "\5\0\23\6\260\0\100\6\200\0\113\6\4\0\71\6"+
    "\7\0\21\6\100\0\2\6\1\0\1\6\34\0\370\6"+
    "\10\0\363\6\15\0\37\6\61\0\3\6\21\0\4\6"+
    "\10\0\u018c\6\4\0\153\6\5\0\15\6\3\0\11\6"+
    "\7\0\12\6\3\0\2\6\306\0\5\6\3\0\6\6"+
    "\10\0\10\6\2\0\7\6\36\0\4\6\224\0\3\6"+
    "\273\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6"+
    "\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6"+
    "\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6"+
    "\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6"+
    "\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\10\6\2\0\62\73\67\6\4\0"+
    "\62\6\10\0\1\6\16\0\1\6\26\0\5\6\1\0"+
    "\17\6\120\0\7\6\1\0\21\6\2\0\7\6\1\0"+
    "\2\6\1\0\5\6\325\0\55\6\3\0\16\6\2\0"+
    "\12\73\4\0\1\6\u0171\0\60\6\12\73\6\0\305\6"+
    "\13\0\7\6\51\0\114\6\4\0\12\73\246\0\4\6"+
    "\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6"+
    "\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6"+
    "\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6"+
    "\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6"+
    "\1\0\21\6\5\0\3\6\1\0\5\6\1\0\21\6"+
    "\164\0\32\6\6\0\32\6\6\0\32\6\166\0\327\6"+
    "\51\0\65\6\13\0\336\6\2\0\u0182\6\16\0\u0131\6"+
    "\37\0\36\6\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\3\1\10\2\11\2\12\1\13\1\4\1\3"+
    "\1\14\1\3\1\15\1\16\1\17\3\3\1\20\1\21"+
    "\1\22\1\23\1\3\1\23\1\24\1\25\1\26\5\27"+
    "\1\24\1\23\1\26\2\27\1\30\1\27\1\31\2\32"+
    "\1\0\1\33\1\0\1\34\1\35\2\12\1\36\1\37"+
    "\1\11\1\26\1\12\4\0\1\40\1\0\1\41\1\3"+
    "\13\42\3\3\1\43\3\0\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\12\4\3"+
    "\1\56\1\0\1\12\1\57\1\60\1\61\2\0\1\62"+
    "\11\3\1\63\2\3\1\0\1\27\1\0\1\64\1\12"+
    "\1\3\1\12\1\57\1\60\1\61\1\40\1\0\1\40"+
    "\1\0\7\3\1\65\14\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u016e\0\u016e\0\u016e\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u016e"+
    "\0\u04c4\0\u016e\0\u016e\0\u016e\0\u0501\0\u053e\0\u057b\0\u016e"+
    "\0\u016e\0\u05b8\0\u016e\0\u05f5\0\u0632\0\u016e\0\u016e\0\u016e"+
    "\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u0356\0\u07dd"+
    "\0\u081a\0\u0857\0\u016e\0\u0894\0\u016e\0\u016e\0\u08d1\0\u0632"+
    "\0\u016e\0\u090e\0\u016e\0\u016e\0\u094b\0\u0988\0\u016e\0\u016e"+
    "\0\u09c5\0\u0356\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u0bea\0\u016e\0\u05f5\0\u0632\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u016e\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u06ac\0\u06ac"+
    "\0\u06ac\0\u06ac\0\u016e\0\u06ac\0\u06ac\0\u06ac\0\u016e\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u016e\0\u10eb\0\u10eb\0\u0a7c"+
    "\0\u0ab9\0\u0af6\0\u1128\0\u1165\0\u05f5\0\u11a2\0\u11df\0\u121c"+
    "\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u05f5\0\u13c7"+
    "\0\u0ec6\0\u1404\0\u0f40\0\u1441\0\u06ac\0\u147e\0\u14bb\0\u14bb"+
    "\0\u1034\0\u1071\0\u10ae\0\u14f8\0\u1535\0\u1165\0\u1572\0\u15af"+
    "\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u05f5\0\u175a"+
    "\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u0d58\0\u18c8\0\u1905"+
    "\0\u1942\0\u197f\0\u19bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\12\1\13\2\11\1\14\1\15"+
    "\1\16\1\17\1\20\1\17\1\21\1\22\1\23\3\24"+
    "\1\25\1\26\7\11\1\27\1\30\1\31\1\32\1\33"+
    "\1\11\1\34\5\11\1\35\4\11\1\36\4\11\1\37"+
    "\3\11\1\40\1\11\1\41\1\42\2\7\3\43\1\44"+
    "\1\43\4\44\2\43\1\44\1\43\1\44\1\45\1\43"+
    "\4\44\2\43\10\44\1\43\1\44\2\43\1\44\1\43"+
    "\23\44\1\43\1\44\2\43\1\44\17\43\1\46\1\47"+
    "\4\43\1\50\53\43\1\51\1\43\2\52\1\53\1\52"+
    "\2\43\1\54\1\43\1\55\1\56\1\57\4\52\1\60"+
    "\1\43\1\61\1\52\1\62\5\52\1\43\1\52\1\43"+
    "\1\63\1\52\1\43\23\52\1\43\1\64\1\43\1\65"+
    "\1\52\17\43\1\46\1\57\4\43\1\50\50\43\70\66"+
    "\1\67\4\66\76\0\2\10\75\0\1\44\1\0\4\44"+
    "\2\0\1\44\1\0\1\44\1\70\1\0\4\44\2\0"+
    "\10\44\1\0\1\44\2\0\1\44\1\0\23\44\1\0"+
    "\1\44\2\0\1\44\1\0\4\12\1\71\32\12\1\72"+
    "\35\12\42\26\1\73\25\26\1\74\4\26\3\0\1\44"+
    "\1\0\4\44\2\0\1\44\1\0\1\44\1\70\1\0"+
    "\1\75\3\76\2\0\10\44\1\0\1\44\2\0\1\44"+
    "\1\0\23\44\1\0\1\44\2\0\1\44\32\0\1\77"+
    "\46\0\1\100\1\0\4\100\2\0\1\100\1\0\1\101"+
    "\1\11\1\0\4\100\2\0\10\100\1\0\1\100\2\0"+
    "\1\100\1\0\23\100\1\0\1\100\2\0\1\100\4\0"+
    "\1\102\1\0\4\102\2\0\1\102\1\0\7\102\2\0"+
    "\10\102\1\0\1\102\2\0\1\102\1\0\23\102\1\0"+
    "\1\102\2\0\1\102\17\0\1\103\1\0\4\24\10\0"+
    "\1\104\10\0\1\105\2\0\1\104\6\0\1\106\6\0"+
    "\1\107\24\0\1\103\1\0\4\24\10\0\1\104\13\0"+
    "\1\104\27\0\1\110\1\0\4\110\2\0\1\110\1\0"+
    "\1\110\1\111\1\0\4\110\1\112\1\0\10\110\1\0"+
    "\1\110\2\0\1\110\1\0\23\110\1\0\1\110\2\0"+
    "\1\110\1\0\2\26\1\0\71\26\4\0\1\44\1\0"+
    "\4\44\2\0\1\44\1\0\1\44\1\70\1\0\4\44"+
    "\2\0\4\44\1\113\3\44\1\0\1\44\2\0\1\44"+
    "\1\0\23\44\1\0\1\44\2\0\1\44\1\0\2\114"+
    "\1\0\1\115\1\114\4\115\2\114\1\115\1\114\1\115"+
    "\1\116\1\114\4\115\2\114\10\115\1\114\1\115\2\114"+
    "\1\115\1\114\1\115\1\117\3\115\1\120\4\115\1\121"+
    "\1\122\1\115\1\123\1\124\1\125\1\126\2\115\1\114"+
    "\1\115\2\114\1\115\4\0\1\44\1\0\4\44\2\0"+
    "\1\44\1\0\1\44\1\70\1\0\4\44\2\0\10\44"+
    "\1\0\1\44\2\0\1\44\1\0\1\127\22\44\1\0"+
    "\1\44\2\0\1\44\4\0\1\44\1\0\4\44\2\0"+
    "\1\44\1\0\1\44\1\70\1\0\4\44\2\0\10\44"+
    "\1\0\1\44\2\0\1\44\1\0\6\44\1\130\14\44"+
    "\1\0\1\44\2\0\1\44\4\0\1\44\1\0\4\44"+
    "\2\0\1\44\1\0\1\44\1\70\1\0\4\44\2\0"+
    "\10\44\1\0\1\44\2\0\1\44\1\0\15\44\1\131"+
    "\5\44\1\0\1\44\2\0\1\44\32\0\1\132\46\0"+
    "\1\44\1\0\4\44\2\0\1\44\1\0\1\44\1\70"+
    "\1\0\4\44\1\133\1\0\10\44\1\0\1\44\2\0"+
    "\1\44\1\0\23\44\1\0\1\44\2\0\1\44\4\0"+
    "\1\44\1\0\4\44\2\0\1\44\1\0\2\44\1\0"+
    "\4\44\2\0\10\44\1\0\1\44\2\0\1\44\1\0"+
    "\23\44\1\0\1\44\2\0\1\44\4\0\1\52\1\0"+
    "\4\52\2\0\1\52\1\0\1\52\1\134\1\0\4\52"+
    "\1\135\1\0\1\52\1\136\6\52\1\0\1\52\2\0"+
    "\1\52\1\0\23\52\1\0\1\52\2\0\1\52\4\0"+
    "\1\52\1\0\4\52\2\0\1\52\1\0\1\52\1\134"+
    "\1\0\4\52\1\135\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\1\0\23\52\1\0\1\52\2\0\1\52\4\0"+
    "\1\52\1\0\2\52\1\137\1\52\2\0\1\52\1\0"+
    "\1\52\1\134\1\0\4\52\1\135\1\0\10\52\1\0"+
    "\1\52\2\0\1\52\1\0\23\52\1\0\1\52\2\0"+
    "\1\52\4\0\1\52\1\0\4\52\2\0\1\140\1\0"+
    "\1\52\1\134\1\0\4\52\1\135\1\0\10\52\1\0"+
    "\1\52\2\0\1\52\1\0\23\52\1\0\1\52\2\0"+
    "\1\52\4\0\1\52\1\0\4\52\2\0\1\52\1\0"+
    "\1\141\1\134\1\0\4\52\1\135\1\0\10\52\1\0"+
    "\1\52\2\0\1\52\1\0\23\52\1\0\1\52\2\0"+
    "\1\52\4\0\1\52\1\0\4\52\2\0\1\52\1\0"+
    "\1\142\1\52\1\0\4\52\2\0\10\52\1\0\1\52"+
    "\2\0\1\52\1\0\23\52\1\0\1\52\2\0\1\52"+
    "\25\0\1\143\53\0\1\52\1\0\4\52\2\0\1\52"+
    "\1\0\1\52\1\134\1\0\4\52\1\135\1\0\1\144"+
    "\7\52\1\0\1\52\2\0\1\52\1\0\23\52\1\0"+
    "\1\52\2\0\1\52\4\0\1\52\1\0\4\52\2\0"+
    "\1\52\1\0\1\52\1\134\1\0\4\52\1\135\1\0"+
    "\2\52\1\145\5\52\1\0\1\52\2\0\1\52\1\0"+
    "\23\52\1\0\1\52\2\0\1\52\4\0\1\52\1\0"+
    "\4\52\2\0\1\52\1\0\1\52\1\134\1\0\4\52"+
    "\1\135\1\0\10\52\1\0\1\52\2\0\1\52\1\0"+
    "\23\52\1\0\1\146\2\0\1\52\6\0\1\147\67\0"+
    "\2\12\1\0\71\12\4\0\1\44\1\0\4\44\2\0"+
    "\1\44\1\0\1\44\1\150\1\0\4\76\1\133\1\0"+
    "\6\44\1\151\1\44\1\0\1\44\2\0\1\44\1\0"+
    "\1\44\1\152\2\44\1\151\6\44\1\153\6\44\1\154"+
    "\1\0\1\44\2\0\1\44\4\0\1\44\1\0\4\44"+
    "\2\0\1\44\1\0\1\44\1\150\1\0\4\76\1\133"+
    "\1\0\6\44\1\151\1\44\1\0\1\44\2\0\1\44"+
    "\1\0\4\44\1\151\16\44\1\0\1\44\2\0\1\44"+
    "\4\0\1\155\1\0\4\155\2\0\1\155\1\0\1\155"+
    "\2\0\4\155\2\0\10\155\1\0\1\155\2\0\1\155"+
    "\1\0\23\155\1\0\1\155\2\0\1\155\21\0\4\103"+
    "\10\0\1\104\13\0\1\104\37\0\1\156\1\0\1\156"+
    "\2\0\4\157\71\0\2\160\20\0\1\160\52\0\3\161"+
    "\17\0\1\161\52\0\4\162\6\0\3\162\5\0\1\162"+
    "\1\0\6\162\21\0\1\162\4\0\1\110\1\0\4\110"+
    "\2\0\1\110\1\0\1\110\1\111\1\163\4\110\1\164"+
    "\1\0\10\110\1\0\1\110\2\0\1\110\1\0\23\110"+
    "\1\0\1\110\2\0\1\110\4\0\1\110\1\0\4\110"+
    "\2\0\1\110\1\0\2\110\1\0\4\110\2\0\10\110"+
    "\1\0\1\110\2\0\1\110\1\0\23\110\1\0\1\110"+
    "\2\0\1\110\4\0\1\110\1\0\4\110\2\0\1\110"+
    "\1\0\1\110\1\111\1\0\4\110\2\0\10\110\1\0"+
    "\1\110\2\0\1\110\1\0\23\110\1\0\1\110\2\0"+
    "\1\110\4\0\1\44\1\0\4\44\2\0\1\44\1\0"+
    "\1\44\1\70\1\0\4\44\1\133\1\0\7\44\1\165"+
    "\1\0\1\44\2\0\1\44\1\0\23\44\1\0\1\44"+
    "\2\0\1\44\4\0\1\44\1\0\4\44\2\0\1\44"+
    "\1\0\1\44\1\70\1\0\4\44\1\133\1\0\10\44"+
    "\1\0\1\44\2\0\1\44\1\0\1\166\22\44\1\0"+
    "\1\44\2\0\1\44\4\0\1\44\1\0\4\44\2\0"+
    "\1\44\1\0\1\44\1\70\1\0\4\44\1\133\1\0"+
    "\10\44\1\0\1\44\2\0\1\44\1\0\13\44\1\167"+
    "\7\44\1\0\1\44\2\0\1\44\4\0\1\44\1\0"+
    "\4\44\2\0\1\44\1\0\1\44\1\70\1\0\4\44"+
    "\1\133\1\0\10\44\1\0\1\44\2\0\1\44\1\0"+
    "\4\44\1\170\16\44\1\0\1\44\2\0\1\44\4\0"+
    "\1\44\1\0\4\44\2\0\1\44\1\0\1\44\1\70"+
    "\1\0\3\171\1\44\1\133\1\0\10\44\1\0\1\44"+
    "\2\0\1\44\1\0\23\44\1\0\1\44\2\0\1\44"+
    "\4\0\1\44\1\0\4\44\2\0\1\44\1\0\1\44"+
    "\1\70\1\0\4\44\1\133\1\0\10\44\1\0\1\44"+
    "\2\0\1\44\1\0\4\44\1\172\16\44\1\0\1\44"+
    "\2\0\1\44\4\0\1\44\1\0\4\44\2\0\1\44"+
    "\1\0\1\44\1\70\1\0\4\44\1\133\1\0\10\44"+
    "\1\0\1\44\2\0\1\44\1\0\14\44\1\173\6\44"+
    "\1\0\1\44\2\0\1\44\4\0\1\44\1\0\4\44"+
    "\2\0\1\44\1\0\1\44\1\70\1\0\4\44\1\133"+
    "\1\0\10\44\1\0\1\44\2\0\1\44\1\0\1\174"+
    "\22\44\1\0\1\44\2\0\1\44\4\0\1\44\1\0"+
    "\4\44\2\0\1\44\1\0\1\44\1\70\1\0\4\175"+
    "\1\133\1\0\4\44\3\175\1\44\1\0\1\44\2\0"+
    "\1\44\1\0\6\175\15\44\1\0\1\44\2\0\1\44"+
    "\4\0\1\44\1\0\4\44\2\0\1\44\1\0\1\44"+
    "\1\70\1\0\4\44\1\133\1\0\10\44\1\0\1\44"+
    "\2\0\1\44\1\0\10\44\1\176\12\44\1\0\1\44"+
    "\2\0\1\44\4\0\1\44\1\0\4\44\2\0\1\44"+
    "\1\0\1\44\1\70\1\0\4\44\1\133\1\0\10\44"+
    "\1\0\1\44\2\0\1\44\1\0\10\44\1\177\12\44"+
    "\1\0\1\44\2\0\1\44\4\0\1\44\1\0\4\44"+
    "\2\0\1\44\1\0\1\44\1\70\1\0\4\44\1\133"+
    "\1\0\10\44\1\0\1\44\2\0\1\44\1\0\20\44"+
    "\1\200\2\44\1\0\1\44\2\0\1\44\4\0\1\201"+
    "\1\0\4\201\2\0\1\201\1\0\1\201\1\202\1\0"+
    "\4\201\2\0\10\201\1\0\1\201\2\0\1\201\1\0"+
    "\23\201\1\0\1\201\2\0\1\201\4\0\1\52\1\0"+
    "\4\52\2\0\1\52\1\0\2\52\1\0\4\52\2\0"+
    "\10\52\1\0\1\52\2\0\1\52\1\0\23\52\1\0"+
    "\1\52\2\0\1\52\4\0\1\203\1\0\4\203\2\0"+
    "\1\203\1\0\1\203\1\204\1\0\4\203\2\0\10\203"+
    "\1\0\1\203\2\0\1\203\1\0\23\203\1\0\1\203"+
    "\2\0\1\203\4\0\1\52\1\0\4\52\2\0\1\52"+
    "\1\0\1\52\1\134\1\0\4\52\1\135\1\0\1\52"+
    "\1\205\6\52\1\0\1\52\2\0\1\52\1\0\23\52"+
    "\1\0\1\52\2\0\1\52\4\0\1\44\1\0\4\44"+
    "\2\0\1\44\1\0\2\44\1\0\4\206\2\0\6\44"+
    "\1\151\1\44\1\0\1\44\2\0\1\44\1\0\4\44"+
    "\1\151\16\44\1\0\1\44\2\0\1\44\4\0\1\44"+
    "\1\0\4\44\2\0\1\207\1\0\1\207\1\70\1\0"+
    "\4\210\1\133\1\0\10\44\1\0\1\44\2\0\1\44"+
    "\1\0\23\44\1\0\1\44\2\0\1\44\4\0\1\44"+
    "\1\0\4\44\2\0\1\44\1\0\1\44\1\70\1\0"+
    "\2\211\2\44\1\133\1\0\10\44\1\0\1\44\2\0"+
    "\1\211\1\0\23\44\1\0\1\44\2\0\1\44\4\0"+
    "\1\44\1\0\4\44\2\0\1\44\1\0\1\44\1\70"+
    "\1\0\3\212\1\44\1\133\1\0\10\44\1\0\1\44"+
    "\2\0\1\212\1\0\23\44\1\0\1\44\2\0\1\44"+
    "\4\0\1\44\1\0\4\44\2\0\1\44\1\0\1\44"+
    "\1\70\1\0\4\213\1\133\1\0\4\44\3\213\1\44"+
    "\1\0\1\44\2\0\1\213\1\0\6\213\15\44\1\0"+
    "\1\44\2\0\1\213\21\0\4\157\54\0\1\214\1\0"+
    "\4\214\2\0\1\214\1\0\1\214\1\215\1\0\4\214"+
    "\2\0\10\214\1\0\1\214\2\0\1\214\1\0\23\214"+
    "\1\0\1\214\2\0\1\214\4\0\1\216\1\0\4\216"+
    "\2\0\1\216\1\0\1\216\1\217\1\0\4\216\2\0"+
    "\10\216\1\0\1\216\2\0\1\216\1\0\23\216\1\0"+
    "\1\216\2\0\1\216\4\0\1\44\1\0\4\44\2\0"+
    "\1\44\1\0\1\44\1\70\1\0\4\44\1\133\1\0"+
    "\10\44\1\0\1\44\2\0\1\44\1\0\2\44\1\220"+
    "\20\44\1\0\1\44\2\0\1\44\4\0\1\44\1\0"+
    "\4\44\2\0\1\44\1\0\1\44\1\70\1\0\4\44"+
    "\1\133\1\0\10\44\1\0\1\44\2\0\1\44\1\0"+
    "\15\44\1\221\5\44\1\0\1\44\2\0\1\44\4\0"+
    "\1\44\1\0\4\44\2\0\1\44\1\0\1\44\1\70"+
    "\1\0\4\44\1\133\1\0\10\44\1\0\1\44\2\0"+
    "\1\44\1\0\21\44\1\222\1\44\1\0\1\44\2\0"+
    "\1\44\4\0\1\44\1\0\4\44\2\0\1\44\1\0"+
    "\1\44\1\70\1\0\3\223\1\44\1\133\1\0\10\44"+
    "\1\0\1\44\2\0\1\44\1\0\23\44\1\0\1\44"+
    "\2\0\1\44\4\0\1\44\1\0\4\44\2\0\1\44"+
    "\1\0\1\44\1\70\1\0\4\44\1\133\1\0\10\44"+
    "\1\0\1\44\2\0\1\44\1\0\17\44\1\224\3\44"+
    "\1\0\1\44\2\0\1\44\4\0\1\44\1\0\4\44"+
    "\2\0\1\44\1\0\1\44\1\70\1\0\4\44\1\133"+
    "\1\0\10\44\1\0\1\44\2\0\1\44\1\0\1\225"+
    "\22\44\1\0\1\44\2\0\1\44\4\0\1\44\1\0"+
    "\4\44\2\0\1\44\1\0\1\44\1\70\1\0\4\44"+
    "\1\133\1\0\10\44\1\0\1\44\2\0\1\44\1\0"+
    "\1\44\1\115\21\44\1\0\1\44\2\0\1\44\4\0"+
    "\1\44\1\0\4\44\2\0\1\44\1\0\1\44\1\70"+
    "\1\0\4\226\1\133\1\0\4\44\3\226\1\44\1\0"+
    "\1\44\2\0\1\44\1\0\6\226\15\44\1\0\1\44"+
    "\2\0\1\44\4\0\1\44\1\0\4\44\2\0\1\44"+
    "\1\0\1\44\1\70\1\0\4\44\1\133\1\0\10\44"+
    "\1\0\1\44\2\0\1\44\1\0\16\44\1\200\4\44"+
    "\1\0\1\44\2\0\1\44\4\0\1\44\1\0\4\44"+
    "\2\0\1\44\1\0\1\44\1\70\1\0\4\44\1\133"+
    "\1\0\10\44\1\0\1\44\2\0\1\44\1\0\4\44"+
    "\1\227\16\44\1\0\1\44\2\0\1\44\4\0\1\201"+
    "\1\0\4\201\2\0\1\201\1\0\2\201\1\0\4\201"+
    "\2\0\10\201\1\0\1\201\2\0\1\201\1\0\23\201"+
    "\1\0\1\201\2\0\1\201\4\0\1\203\1\0\4\203"+
    "\2\0\1\203\1\0\2\203\1\0\4\203\2\0\10\203"+
    "\1\0\1\203\2\0\1\203\1\0\23\203\1\0\1\203"+
    "\2\0\1\203\4\0\1\44\1\0\4\44\2\0\1\44"+
    "\1\0\1\44\1\70\1\0\4\206\1\133\1\0\6\44"+
    "\1\151\1\44\1\0\1\44\2\0\1\44\1\0\4\44"+
    "\1\151\16\44\1\0\1\44\2\0\1\44\4\0\1\44"+
    "\1\0\4\44\2\0\1\44\1\0\1\44\1\70\1\0"+
    "\4\210\1\133\1\0\10\44\1\0\1\44\2\0\1\44"+
    "\1\0\23\44\1\0\1\44\2\0\1\44\4\0\1\214"+
    "\1\0\4\214\2\0\1\214\1\0\1\214\1\215\1\0"+
    "\4\214\1\164\1\0\10\214\1\0\1\214\2\0\1\214"+
    "\1\0\23\214\1\0\1\214\2\0\1\214\4\0\1\214"+
    "\1\0\4\214\2\0\1\214\1\0\2\214\1\0\4\214"+
    "\2\0\10\214\1\0\1\214\2\0\1\214\1\0\23\214"+
    "\1\0\1\214\2\0\1\214\4\0\1\216\1\0\4\216"+
    "\2\0\1\216\1\0\2\216\1\0\4\216\2\0\10\216"+
    "\1\0\1\216\2\0\1\216\1\0\23\216\1\0\1\216"+
    "\2\0\1\216\4\0\1\44\1\0\4\44\2\0\1\44"+
    "\1\0\1\44\1\70\1\0\4\44\1\133\1\0\10\44"+
    "\1\0\1\44\2\0\1\44\1\0\7\44\1\230\13\44"+
    "\1\0\1\44\2\0\1\44\4\0\1\44\1\0\4\44"+
    "\2\0\1\44\1\0\1\44\1\70\1\0\4\44\1\133"+
    "\1\0\10\44\1\0\1\44\2\0\1\44\1\0\11\44"+
    "\1\231\11\44\1\0\1\44\2\0\1\44\4\0\1\44"+
    "\1\0\4\44\2\0\1\44\1\0\1\44\1\70\1\0"+
    "\4\44\1\133\1\0\10\44\1\0\1\44\2\0\1\44"+
    "\1\0\10\44\1\232\12\44\1\0\1\44\2\0\1\44"+
    "\4\0\1\44\1\0\4\44\2\0\1\44\1\0\1\44"+
    "\1\70\1\0\3\115\1\44\1\133\1\0\10\44\1\0"+
    "\1\44\2\0\1\44\1\0\23\44\1\0\1\44\2\0"+
    "\1\44\4\0\1\44\1\0\4\44\2\0\1\44\1\0"+
    "\1\44\1\70\1\0\4\44\1\133\1\0\10\44\1\0"+
    "\1\44\2\0\1\44\1\0\20\44\1\233\2\44\1\0"+
    "\1\44\2\0\1\44\4\0\1\44\1\0\4\44\2\0"+
    "\1\44\1\0\1\44\1\70\1\0\4\44\1\133\1\0"+
    "\10\44\1\0\1\44\2\0\1\44\1\0\2\44\1\234"+
    "\20\44\1\0\1\44\2\0\1\44\4\0\1\44\1\0"+
    "\4\44\2\0\1\44\1\0\1\44\1\70\1\0\4\235"+
    "\1\133\1\0\4\44\3\235\1\44\1\0\1\44\2\0"+
    "\1\44\1\0\6\235\15\44\1\0\1\44\2\0\1\44"+
    "\4\0\1\44\1\0\4\44\2\0\1\44\1\0\1\44"+
    "\1\70\1\0\4\44\1\133\1\0\10\44\1\0\1\44"+
    "\2\0\1\44\1\0\16\44\1\236\4\44\1\0\1\44"+
    "\2\0\1\44\4\0\1\44\1\0\4\44\2\0\1\44"+
    "\1\0\1\44\1\70\1\0\4\44\1\133\1\0\10\44"+
    "\1\0\1\44\2\0\1\44\1\0\5\44\1\237\15\44"+
    "\1\0\1\44\2\0\1\44\4\0\1\44\1\0\4\44"+
    "\2\0\1\44\1\0\1\44\1\70\1\0\4\44\1\133"+
    "\1\0\10\44\1\0\1\44\2\0\1\44\1\0\6\44"+
    "\1\240\14\44\1\0\1\44\2\0\1\44\4\0\1\44"+
    "\1\0\4\44\2\0\1\44\1\0\1\44\1\70\1\0"+
    "\4\44\1\133\1\0\10\44\1\0\1\44\2\0\1\44"+
    "\1\0\15\44\1\241\5\44\1\0\1\44\2\0\1\44"+
    "\4\0\1\44\1\0\4\44\2\0\1\44\1\0\1\44"+
    "\1\70\1\0\4\44\1\133\1\0\10\44\1\0\1\44"+
    "\2\0\1\44\1\0\4\44\1\115\16\44\1\0\1\44"+
    "\2\0\1\44\4\0\1\44\1\0\4\44\2\0\1\44"+
    "\1\0\1\44\1\70\1\0\4\115\1\133\1\0\4\44"+
    "\3\115\1\44\1\0\1\44\2\0\1\44\1\0\6\115"+
    "\15\44\1\0\1\44\2\0\1\44\4\0\1\44\1\0"+
    "\4\44\2\0\1\44\1\0\1\44\1\70\1\0\4\44"+
    "\1\133\1\0\10\44\1\0\1\44\2\0\1\44\1\0"+
    "\4\44\1\242\16\44\1\0\1\44\2\0\1\44\4\0"+
    "\1\44\1\0\4\44\2\0\1\44\1\0\1\44\1\70"+
    "\1\0\4\44\1\133\1\0\10\44\1\0\1\44\2\0"+
    "\1\44\1\0\12\44\1\234\10\44\1\0\1\44\2\0"+
    "\1\44\4\0\1\44\1\0\4\44\2\0\1\44\1\0"+
    "\1\44\1\70\1\0\4\44\1\133\1\0\10\44\1\0"+
    "\1\44\2\0\1\44\1\0\12\44\1\115\10\44\1\0"+
    "\1\44\2\0\1\44\4\0\1\44\1\0\4\44\2\0"+
    "\1\44\1\0\1\44\1\70\1\0\4\44\1\133\1\0"+
    "\10\44\1\0\1\44\2\0\1\44\1\0\4\44\1\243"+
    "\16\44\1\0\1\44\2\0\1\44\4\0\1\44\1\0"+
    "\4\44\2\0\1\44\1\0\1\44\1\70\1\0\4\44"+
    "\1\133\1\0\10\44\1\0\1\44\2\0\1\44\1\0"+
    "\3\44\1\115\17\44\1\0\1\44\2\0\1\44\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6649];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\4\1\3\11\11\1\1\11\1\1\3\11"+
    "\3\1\2\11\1\1\1\11\2\1\3\11\12\1\1\11"+
    "\1\1\2\11\1\1\1\0\1\11\1\0\2\11\2\1"+
    "\2\11\3\1\4\0\1\1\1\0\2\1\1\11\15\1"+
    "\1\11\3\0\5\1\1\11\3\1\1\11\5\1\1\11"+
    "\1\0\4\1\2\0\15\1\1\0\1\1\1\0\10\1"+
    "\1\0\1\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 54: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 55: break;
          case 3:
            { yybegin(SYMBOL1); return PhelTypes.SYM;
            }
          // fall through
          case 56: break;
          case 4:
            { return PhelTypes.LINE_COMMENT;
            }
          // fall through
          case 57: break;
          case 5:
            { return PhelTypes.QUOTE;
            }
          // fall through
          case 58: break;
          case 6:
            { return PhelTypes.PAREN1;
            }
          // fall through
          case 59: break;
          case 7:
            { return PhelTypes.PAREN2;
            }
          // fall through
          case 60: break;
          case 8:
            { return PhelTypes.COMMA;
            }
          // fall through
          case 61: break;
          case 9:
            { return PhelTypes.SYM;
            }
          // fall through
          case 62: break;
          case 10:
            { return PhelTypes.NUMBER;
            }
          // fall through
          case 63: break;
          case 11:
            { yybegin(SYMBOL0); return PhelTypes.COLON;
            }
          // fall through
          case 64: break;
          case 12:
            { return PhelTypes.BRACKET1;
            }
          // fall through
          case 65: break;
          case 13:
            { return PhelTypes.BRACKET2;
            }
          // fall through
          case 66: break;
          case 14:
            { return PhelTypes.HAT;
            }
          // fall through
          case 67: break;
          case 15:
            { return PhelTypes.SYNTAX_QUOTE;
            }
          // fall through
          case 68: break;
          case 16:
            { return PhelTypes.BRACE1;
            }
          // fall through
          case 69: break;
          case 17:
            { return PhelTypes.BRACE2;
            }
          // fall through
          case 70: break;
          case 18:
            { return PhelTypes.TILDE;
            }
          // fall through
          case 71: break;
          case 19:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 72: break;
          case 20:
            { yybegin(YYINITIAL); return PhelTypes.DOT;
            }
          // fall through
          case 73: break;
          case 21:
            { yybegin(SYMBOL2); return PhelTypes.SLASH;
            }
          // fall through
          case 74: break;
          case 22:
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          // fall through
          case 75: break;
          case 23:
            { yybegin(SYMBOL3); return PhelTypes.SYM;
            }
          // fall through
          case 76: break;
          case 24:
            { yybegin(YYINITIAL); return PhelTypes.HAT;
            }
          // fall through
          case 77: break;
          case 25:
            { yybegin(YYINITIAL); return PhelTypes.TILDE;
            }
          // fall through
          case 78: break;
          case 26:
            { return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 79: break;
          case 27:
            { return PhelTypes.STRING;
            }
          // fall through
          case 80: break;
          case 28:
            { return PhelTypes.FORM_COMMENT;
            }
          // fall through
          case 81: break;
          case 29:
            { yybegin(MULTILINE_COMMENT); return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 82: break;
          case 30:
            { return PhelTypes.COMMA_AT;
            }
          // fall through
          case 83: break;
          case 31:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(SYMBOL0); return PhelTypes.DOT;
            }
          // fall through
          case 84: break;
          case 32:
            { return PhelTypes.KEYWORD_TOKEN;
            }
          // fall through
          case 85: break;
          case 33:
            { yybegin(SYMBOL0); return PhelTypes.COLONCOLON;
            }
          // fall through
          case 86: break;
          case 34:
            { return PhelTypes.CHAR;
            }
          // fall through
          case 87: break;
          case 35:
            { return PhelTypes.TILDE_AT;
            }
          // fall through
          case 88: break;
          case 36:
            { yybegin(YYINITIAL); return PhelTypes.NOT_EQUAL;
            }
          // fall through
          case 89: break;
          case 37:
            { yybegin(YYINITIAL); return PhelTypes.AND_AND;
            }
          // fall through
          case 90: break;
          case 38:
            { yybegin(YYINITIAL); return PhelTypes.INCREMENT;
            }
          // fall through
          case 91: break;
          case 39:
            { yybegin(YYINITIAL); return PhelTypes.DECREMENT;
            }
          // fall through
          case 92: break;
          case 40:
            { yybegin(YYINITIAL); return PhelTypes.DOTDASH;
            }
          // fall through
          case 93: break;
          case 41:
            { yybegin(YYINITIAL); return PhelTypes.COLONCOLON;
            }
          // fall through
          case 94: break;
          case 42:
            { yybegin(YYINITIAL); return PhelTypes.SHIFT_LEFT;
            }
          // fall through
          case 95: break;
          case 43:
            { yybegin(YYINITIAL); return PhelTypes.SHIFT_RIGHT;
            }
          // fall through
          case 96: break;
          case 44:
            { yybegin(YYINITIAL); return PhelTypes.OR_OR;
            }
          // fall through
          case 97: break;
          case 45:
            { yybegin(YYINITIAL); return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 98: break;
          case 46:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(SYMBOL0); return PhelTypes.DOTDASH;
            }
          // fall through
          case 99: break;
          case 47:
            { return PhelTypes.BINNUM;
            }
          // fall through
          case 100: break;
          case 48:
            { return PhelTypes.OCTNUM;
            }
          // fall through
          case 101: break;
          case 49:
            { return PhelTypes.HEXNUM;
            }
          // fall through
          case 102: break;
          case 50:
            { return PhelTypes.NAN;
            }
          // fall through
          case 103: break;
          case 51:
            { return PhelTypes.NIL;
            }
          // fall through
          case 104: break;
          case 52:
            { yybegin(YYINITIAL); return PhelTypes.NOT_IDENTICAL;
            }
          // fall through
          case 105: break;
          case 53:
            { return PhelTypes.BOOL;
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

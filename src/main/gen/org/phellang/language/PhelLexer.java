// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/kotlin/org/phellang/language/Phel.flex

package org.phellang.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.phellang.language.psi.PhelTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


public class PhelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\3\3\1\6\1\7\1\10\1\3\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\6\20\2\21\1\22\1\23"+
    "\4\3\1\24\1\25\3\26\1\27\1\26\7\3\1\30"+
    "\14\3\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\2\3\1\45\1\3"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\3\1\54"+
    "\1\55\1\56\1\57\1\3\1\60\1\61\2\3\1\62"+
    "\1\63\1\64\1\65\6\0\1\2\32\0\1\1\11\0"+
    "\1\3\12\0\1\3\4\0\1\3\5\0\27\3\1\0"+
    "\37\3\1\0\u01ca\3\4\0\14\3\16\0\5\3\7\0"+
    "\1\3\1\0\1\3\21\0\165\3\1\0\2\3\2\0"+
    "\4\3\1\0\1\3\6\0\1\3\1\0\3\3\1\0"+
    "\1\3\1\0\24\3\1\0\123\3\1\0\213\3\1\0"+
    "\255\3\1\0\46\3\2\0\1\3\6\0\51\3\10\0"+
    "\55\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\3\10\0\33\3\4\0\4\3\35\0\13\3\5\0"+
    "\100\3\12\66\4\0\146\3\1\0\10\3\2\0\12\3"+
    "\1\0\6\3\12\66\3\3\2\0\1\3\20\0\73\3"+
    "\2\0\145\3\16\0\12\66\54\3\4\0\1\3\2\0"+
    "\1\3\2\0\56\3\22\0\34\3\4\0\13\3\65\0"+
    "\25\3\1\0\10\3\25\0\17\3\1\0\201\3\2\0"+
    "\12\66\1\0\23\3\1\0\10\3\2\0\2\3\2\0"+
    "\26\3\1\0\7\3\1\0\1\3\3\0\4\3\2\0"+
    "\11\3\2\0\2\3\2\0\4\3\10\0\1\3\4\0"+
    "\2\3\1\0\5\3\2\0\12\66\2\3\12\0\1\3"+
    "\1\0\1\3\2\0\3\3\1\0\6\3\4\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\2\3\2\0\1\3\1\0\5\3\4\0\2\3"+
    "\2\0\3\3\3\0\1\3\7\0\4\3\1\0\1\3"+
    "\7\0\12\66\6\3\13\0\3\3\1\0\11\3\1\0"+
    "\3\3\1\0\26\3\1\0\7\3\1\0\2\3\1\0"+
    "\5\3\2\0\12\3\1\0\3\3\1\0\3\3\2\0"+
    "\1\3\17\0\4\3\2\0\12\66\11\0\7\3\1\0"+
    "\3\3\1\0\10\3\2\0\2\3\2\0\26\3\1\0"+
    "\7\3\1\0\2\3\1\0\5\3\2\0\11\3\2\0"+
    "\2\3\2\0\3\3\10\0\2\3\4\0\2\3\1\0"+
    "\5\3\2\0\12\66\1\0\1\3\20\0\2\3\1\0"+
    "\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0"+
    "\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0"+
    "\14\3\4\0\5\3\3\0\3\3\1\0\4\3\2\0"+
    "\1\3\6\0\1\3\16\0\12\66\20\0\15\3\1\0"+
    "\3\3\1\0\27\3\1\0\20\3\3\0\10\3\1\0"+
    "\3\3\1\0\4\3\7\0\2\3\1\0\3\3\5\0"+
    "\4\3\2\0\12\66\20\0\4\3\1\0\10\3\1\0"+
    "\3\3\1\0\27\3\1\0\12\3\1\0\5\3\2\0"+
    "\11\3\1\0\3\3\1\0\4\3\7\0\2\3\7\0"+
    "\1\3\1\0\4\3\2\0\12\66\1\0\2\3\15\0"+
    "\4\3\1\0\10\3\1\0\3\3\1\0\63\3\1\0"+
    "\3\3\1\0\5\3\5\0\4\3\7\0\5\3\2\0"+
    "\12\66\12\0\6\3\2\0\2\3\1\0\22\3\3\0"+
    "\30\3\1\0\11\3\1\0\1\3\2\0\7\3\3\0"+
    "\1\3\4\0\6\3\1\0\1\3\1\0\10\3\6\0"+
    "\12\66\2\0\2\3\15\0\72\3\5\0\17\3\1\0"+
    "\12\66\47\0\2\3\1\0\1\3\1\0\5\3\1\0"+
    "\30\3\1\0\1\3\1\0\27\3\2\0\5\3\1\0"+
    "\1\3\1\0\6\3\2\0\12\66\2\0\4\3\40\0"+
    "\1\3\27\0\2\3\6\0\12\66\13\0\1\3\1\0"+
    "\1\3\1\0\1\3\4\0\12\3\1\0\44\3\4\0"+
    "\24\3\1\0\22\3\1\0\44\3\11\0\1\3\71\0"+
    "\100\3\12\66\6\0\100\3\12\66\4\3\2\0\46\3"+
    "\1\0\1\3\5\0\1\3\2\0\53\3\1\0\115\3"+
    "\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3"+
    "\2\0\51\3\1\0\4\3\2\0\41\3\1\0\4\3"+
    "\2\0\7\3\1\0\1\3\1\0\4\3\2\0\17\3"+
    "\1\0\71\3\1\0\4\3\2\0\103\3\2\0\3\3"+
    "\40\0\20\3\20\0\126\3\2\0\6\3\3\0\u016c\3"+
    "\2\0\21\3\1\1\32\3\5\0\113\3\3\0\13\3"+
    "\7\0\15\3\1\0\7\3\13\0\25\3\13\0\24\3"+
    "\14\0\15\3\1\0\3\3\1\0\2\3\14\0\124\3"+
    "\3\0\1\3\4\0\2\3\2\0\12\66\41\0\3\3"+
    "\2\0\12\66\6\0\131\3\7\0\53\3\5\0\106\3"+
    "\12\0\37\3\1\0\14\3\4\0\14\3\12\0\12\66"+
    "\36\3\2\0\5\3\13\0\54\3\4\0\32\3\6\0"+
    "\12\66\46\0\34\3\4\0\77\3\1\0\35\3\2\0"+
    "\1\3\12\66\6\0\12\66\15\0\1\3\10\0\17\3"+
    "\101\0\114\3\4\0\12\66\21\0\11\3\14\0\60\3"+
    "\12\66\72\3\14\0\70\3\10\0\12\66\3\0\3\3"+
    "\12\66\44\3\2\0\11\3\7\0\53\3\2\0\3\3"+
    "\20\0\3\3\1\0\47\3\5\0\372\3\1\0\33\3"+
    "\2\0\6\3\2\0\46\3\2\0\6\3\2\0\10\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\37\3"+
    "\2\0\65\3\1\0\7\3\1\0\1\3\3\0\3\3"+
    "\1\0\7\3\3\0\4\3\2\0\6\3\4\0\15\3"+
    "\5\0\3\3\1\0\7\3\3\0\13\1\35\0\2\2"+
    "\5\0\1\1\17\0\2\3\23\0\1\3\12\0\1\1"+
    "\21\0\1\3\15\0\1\3\20\0\15\3\63\0\41\3"+
    "\21\0\1\3\4\0\1\3\2\0\12\3\1\0\1\3"+
    "\3\0\5\3\6\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\4\3\1\0\13\3\2\0\4\3\5\0\5\3"+
    "\4\0\1\3\21\0\51\3\u022d\0\64\3\26\0\57\3"+
    "\1\0\57\3\1\0\205\3\6\0\11\3\14\0\46\3"+
    "\1\0\1\3\5\0\1\3\2\0\70\3\7\0\1\3"+
    "\17\0\30\3\11\0\7\3\1\0\7\3\1\0\7\3"+
    "\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3"+
    "\1\0\7\3\1\0\40\3\57\0\1\3\320\0\1\1"+
    "\4\0\3\3\31\0\17\3\1\0\5\3\2\0\5\3"+
    "\4\0\126\3\2\0\2\3\2\0\3\3\1\0\132\3"+
    "\1\0\4\3\5\0\53\3\1\0\136\3\21\0\33\3"+
    "\65\0\306\3\112\0\360\3\20\0\215\3\103\0\56\3"+
    "\2\0\15\3\3\0\20\3\12\66\2\3\24\0\63\3"+
    "\1\0\12\3\1\0\163\3\45\0\11\3\2\0\147\3"+
    "\2\0\65\3\2\0\5\3\60\0\61\3\30\0\64\3"+
    "\14\0\106\3\12\0\12\66\6\0\30\3\3\0\1\3"+
    "\1\0\3\3\12\66\44\3\2\0\44\3\14\0\35\3"+
    "\3\0\101\3\16\0\1\3\12\66\6\0\20\3\12\66"+
    "\5\3\1\0\67\3\11\0\16\3\2\0\12\66\6\0"+
    "\27\3\3\0\111\3\30\0\3\3\2\0\20\3\2\0"+
    "\5\3\12\0\6\3\2\0\6\3\2\0\6\3\11\0"+
    "\7\3\1\0\7\3\1\0\53\3\1\0\14\3\10\0"+
    "\173\3\1\0\2\3\2\0\12\66\6\0\244\3\14\0"+
    "\27\3\4\0\61\3\4\0\u0100\67\156\3\2\0\152\3"+
    "\46\0\7\3\14\0\5\3\5\0\14\3\1\0\15\3"+
    "\1\0\5\3\1\0\1\3\1\0\2\3\1\0\2\3"+
    "\1\0\154\3\41\0\153\3\22\0\100\3\2\0\66\3"+
    "\50\0\14\3\4\0\20\3\20\0\20\3\3\0\2\3"+
    "\30\0\3\3\40\0\5\3\1\0\207\3\23\0\12\66"+
    "\7\0\32\3\4\0\1\3\1\0\32\3\13\0\131\3"+
    "\3\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3"+
    "\43\0\14\3\1\0\32\3\1\0\23\3\1\0\2\3"+
    "\1\0\17\3\2\0\16\3\42\0\173\3\105\0\65\3"+
    "\210\0\1\3\202\0\35\3\3\0\61\3\17\0\1\3"+
    "\37\0\40\3\15\0\36\3\5\0\53\3\5\0\36\3"+
    "\2\0\44\3\4\0\10\3\1\0\5\3\52\0\236\3"+
    "\2\0\12\66\6\0\44\3\4\0\44\3\4\0\50\3"+
    "\10\0\64\3\234\0\67\3\11\0\26\3\12\0\10\3"+
    "\230\0\6\3\2\0\1\3\1\0\54\3\1\0\2\3"+
    "\3\0\1\3\2\0\27\3\12\0\27\3\11\0\37\3"+
    "\101\0\23\3\1\0\2\3\12\0\26\3\12\0\32\3"+
    "\106\0\70\3\6\0\2\3\100\0\4\3\1\0\2\3"+
    "\5\0\10\3\1\0\3\3\1\0\35\3\2\0\3\3"+
    "\4\0\1\3\40\0\35\3\3\0\35\3\43\0\10\3"+
    "\1\0\36\3\31\0\66\3\12\0\26\3\12\0\23\3"+
    "\15\0\22\3\156\0\111\3\67\0\63\3\15\0\63\3"+
    "\15\0\50\3\10\0\12\66\306\0\35\3\12\0\1\3"+
    "\10\0\41\3\217\0\27\3\11\0\107\3\37\0\12\66"+
    "\17\0\74\3\25\0\31\3\7\0\12\66\6\0\65\3"+
    "\1\0\12\66\4\0\3\3\11\0\44\3\2\0\1\3"+
    "\11\0\105\3\4\0\4\3\3\0\12\66\1\3\1\0"+
    "\1\3\43\0\22\3\1\0\45\3\6\0\1\3\101\0"+
    "\7\3\1\0\1\3\1\0\4\3\1\0\17\3\1\0"+
    "\12\3\7\0\73\3\5\0\12\66\6\0\4\3\1\0"+
    "\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0"+
    "\2\3\1\0\5\3\1\0\12\3\2\0\2\3\2\0"+
    "\3\3\2\0\1\3\6\0\1\3\5\0\7\3\2\0"+
    "\7\3\3\0\5\3\213\0\113\3\5\0\12\66\4\0"+
    "\2\3\40\0\106\3\1\0\1\3\10\0\12\66\246\0"+
    "\66\3\2\0\11\3\27\0\6\3\42\0\101\3\3\0"+
    "\1\3\13\0\12\66\46\0\71\3\7\0\12\66\66\0"+
    "\33\3\2\0\17\3\4\0\12\66\306\0\73\3\145\0"+
    "\100\3\12\66\25\0\1\3\240\0\10\3\2\0\56\3"+
    "\2\0\10\3\1\0\2\3\33\0\77\3\10\0\1\3"+
    "\10\0\112\3\3\0\1\3\42\0\71\3\7\0\11\3"+
    "\1\0\55\3\1\0\11\3\17\0\12\66\30\0\36\3"+
    "\2\0\26\3\1\0\16\3\111\0\7\3\1\0\2\3"+
    "\1\0\54\3\3\0\1\3\1\0\2\3\1\0\11\3"+
    "\10\0\12\66\6\0\6\3\1\0\2\3\1\0\45\3"+
    "\1\0\2\3\1\0\6\3\7\0\12\66\u0136\0\27\3"+
    "\11\0\232\3\146\0\157\3\21\0\304\3\274\0\57\3"+
    "\321\0\107\3\271\0\71\3\7\0\37\3\1\0\12\66"+
    "\146\0\36\3\2\0\5\3\13\0\67\3\11\0\4\3"+
    "\14\0\12\66\11\0\25\3\5\0\23\3\260\0\100\3"+
    "\200\0\113\3\4\0\71\3\7\0\21\3\100\0\2\3"+
    "\1\0\1\3\34\0\370\3\10\0\363\3\15\0\37\3"+
    "\61\0\3\3\21\0\4\3\10\0\u018c\3\4\0\153\3"+
    "\5\0\15\3\3\0\11\3\7\0\12\3\3\0\2\3"+
    "\306\0\5\3\3\0\6\3\10\0\10\3\2\0\7\3"+
    "\36\0\4\3\224\0\3\3\273\0\125\3\1\0\107\3"+
    "\1\0\2\3\2\0\1\3\2\0\2\3\2\0\4\3"+
    "\1\0\14\3\1\0\1\3\1\0\7\3\1\0\101\3"+
    "\1\0\4\3\2\0\10\3\1\0\7\3\1\0\34\3"+
    "\1\0\4\3\1\0\5\3\1\0\1\3\3\0\7\3"+
    "\1\0\u0154\3\2\0\31\3\1\0\31\3\1\0\37\3"+
    "\1\0\31\3\1\0\37\3\1\0\31\3\1\0\37\3"+
    "\1\0\31\3\1\0\37\3\1\0\31\3\1\0\10\3"+
    "\2\0\62\66\67\3\4\0\62\3\10\0\1\3\16\0"+
    "\1\3\26\0\5\3\1\0\17\3\120\0\7\3\1\0"+
    "\21\3\2\0\7\3\1\0\2\3\1\0\5\3\325\0"+
    "\55\3\3\0\16\3\2\0\12\66\4\0\1\3\u0171\0"+
    "\60\3\12\66\6\0\305\3\13\0\7\3\51\0\114\3"+
    "\4\0\12\66\246\0\4\3\1\0\33\3\1\0\2\3"+
    "\1\0\1\3\2\0\1\3\1\0\12\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\6\0\1\3\4\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\2\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\2\3\1\0\1\3"+
    "\2\0\4\3\1\0\7\3\1\0\4\3\1\0\4\3"+
    "\1\0\1\3\1\0\12\3\1\0\21\3\5\0\3\3"+
    "\1\0\5\3\1\0\21\3\164\0\32\3\6\0\32\3"+
    "\6\0\32\3\166\0\327\3\51\0\65\3\13\0\336\3"+
    "\2\0\u0182\3\16\0\u0131\3\37\0\36\3\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\3\1\10\1\11\1\12\2\13\1\14\1\4"+
    "\1\3\1\15\1\3\1\16\1\17\1\20\3\3\1\21"+
    "\1\22\1\23\2\24\1\3\2\0\1\25\1\0\1\26"+
    "\1\27\2\13\1\30\1\31\1\1\1\13\4\0\1\32"+
    "\1\0\1\33\1\3\14\34\3\3\1\35\1\36\1\0"+
    "\1\3\1\0\1\13\4\3\1\0\1\13\1\37\1\40"+
    "\1\41\2\0\1\42\11\3\1\43\2\3\2\0\1\13"+
    "\1\3\1\13\1\37\1\40\1\41\1\32\1\0\1\32"+
    "\1\0\7\3\1\44\2\3\1\0\7\3\1\0\6\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\160"+
    "\0\160\0\160\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0"+
    "\0\u02d8\0\u0310\0\u0348\0\160\0\u0380\0\160\0\160\0\160"+
    "\0\u03b8\0\u03f0\0\u0428\0\160\0\160\0\u0460\0\160\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\160\0\u0578\0\160\0\160\0\u05b0"+
    "\0\u05e8\0\160\0\160\0\u0230\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\160\0\u04d0\0\u0508"+
    "\0\u0540\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\160\0\160\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c40"+
    "\0\u0690\0\u06c8\0\u0700\0\u0c78\0\u0cb0\0\u04d0\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u04d0"+
    "\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u0ff8\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\u1030\0\u1068\0\u0cb0\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u04d0\0\u1260\0\u0f88"+
    "\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420"+
    "\0\u1458\0\u0930\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\13\1\15\1\16\1\17\3\20\1\21"+
    "\1\22\4\5\1\23\1\24\1\25\1\26\1\27\1\5"+
    "\1\30\5\5\1\31\4\5\1\32\4\5\1\33\3\5"+
    "\1\34\1\5\1\35\1\36\2\3\63\37\1\40\4\37"+
    "\71\0\2\4\70\0\1\41\1\0\2\41\2\0\1\41"+
    "\1\0\1\41\1\42\1\43\4\41\2\0\5\41\1\0"+
    "\1\41\2\0\1\41\1\0\23\41\1\0\1\41\2\0"+
    "\1\41\1\0\4\6\1\44\25\6\1\45\35\6\35\22"+
    "\1\46\25\22\1\47\4\22\3\0\1\41\1\0\2\41"+
    "\2\0\1\41\1\0\1\41\1\42\1\43\1\50\3\51"+
    "\2\0\5\41\1\0\1\41\2\0\1\41\1\0\23\41"+
    "\1\0\1\41\2\0\1\41\25\0\1\52\56\0\1\53"+
    "\1\5\56\0\1\54\1\0\2\54\2\0\1\54\1\0"+
    "\7\54\2\0\5\54\1\0\1\54\2\0\1\54\1\0"+
    "\23\54\1\0\1\54\2\0\1\54\15\0\1\55\1\0"+
    "\4\20\5\0\1\56\10\0\1\57\2\0\1\56\6\0"+
    "\1\60\6\0\1\61\22\0\1\55\1\0\4\20\5\0"+
    "\1\56\13\0\1\56\27\0\1\62\1\0\2\62\2\0"+
    "\1\62\1\0\1\62\1\63\1\0\4\62\1\64\1\0"+
    "\5\62\1\0\1\62\2\0\1\62\1\0\23\62\1\0"+
    "\1\62\2\0\1\62\1\0\2\22\1\0\64\22\4\0"+
    "\1\41\1\0\2\41\2\0\1\41\1\0\1\41\1\42"+
    "\1\43\4\41\2\0\1\41\1\65\3\41\1\0\1\41"+
    "\2\0\1\41\1\0\23\41\1\0\1\41\2\0\1\41"+
    "\1\0\2\66\1\0\1\67\1\66\2\67\2\66\1\67"+
    "\1\66\1\67\1\70\1\71\4\67\2\66\5\67\1\66"+
    "\1\67\2\66\1\67\1\66\1\67\1\72\3\67\1\73"+
    "\4\67\1\74\1\75\1\67\1\76\1\77\1\100\1\101"+
    "\2\67\1\66\1\67\2\66\1\67\4\0\1\41\1\0"+
    "\2\41\2\0\1\41\1\0\1\41\1\42\1\43\4\41"+
    "\2\0\5\41\1\0\1\41\2\0\1\41\1\0\1\102"+
    "\22\41\1\0\1\41\2\0\1\41\4\0\1\41\1\0"+
    "\2\41\2\0\1\41\1\0\1\41\1\42\1\43\4\41"+
    "\2\0\5\41\1\0\1\41\2\0\1\41\1\0\6\41"+
    "\1\103\14\41\1\0\1\41\2\0\1\41\4\0\1\41"+
    "\1\0\2\41\2\0\1\41\1\0\1\41\1\42\1\43"+
    "\4\41\2\0\5\41\1\0\1\41\2\0\1\41\1\0"+
    "\15\41\1\104\5\41\1\0\1\41\2\0\1\41\25\0"+
    "\1\105\50\0\1\106\65\0\1\41\1\0\2\41\2\0"+
    "\1\41\1\0\1\41\1\42\1\43\4\41\1\107\1\0"+
    "\5\41\1\0\1\41\2\0\1\41\1\0\23\41\1\0"+
    "\1\41\2\0\1\41\4\0\1\41\1\0\2\41\2\0"+
    "\1\41\1\0\2\41\1\0\4\41\2\0\5\41\1\0"+
    "\1\41\2\0\1\41\1\0\23\41\1\0\1\41\2\0"+
    "\1\41\4\0\1\110\1\0\2\110\2\0\1\110\1\0"+
    "\1\110\1\111\1\0\4\110\2\0\5\110\1\0\1\110"+
    "\2\0\1\110\1\0\23\110\1\0\1\110\2\0\1\110"+
    "\1\0\2\6\1\0\64\6\4\0\1\41\1\0\2\41"+
    "\2\0\1\41\1\0\1\41\1\112\1\43\4\51\1\107"+
    "\1\0\3\41\1\113\1\41\1\0\1\41\2\0\1\41"+
    "\1\0\1\41\1\114\2\41\1\113\6\41\1\115\6\41"+
    "\1\116\1\0\1\41\2\0\1\41\4\0\1\41\1\0"+
    "\2\41\2\0\1\41\1\0\1\41\1\112\1\43\4\51"+
    "\1\107\1\0\3\41\1\113\1\41\1\0\1\41\2\0"+
    "\1\41\1\0\4\41\1\113\16\41\1\0\1\41\2\0"+
    "\1\41\17\0\4\55\5\0\1\56\13\0\1\56\35\0"+
    "\1\117\1\0\1\117\2\0\4\120\64\0\2\121\15\0"+
    "\1\121\50\0\3\122\14\0\1\122\50\0\4\123\3\0"+
    "\3\123\5\0\1\123\1\0\6\123\21\0\1\123\4\0"+
    "\1\62\1\0\2\62\2\0\1\62\1\0\1\62\1\63"+
    "\1\124\4\62\1\125\1\0\5\62\1\0\1\62\2\0"+
    "\1\62\1\0\23\62\1\0\1\62\2\0\1\62\4\0"+
    "\1\62\1\0\2\62\2\0\1\62\1\0\2\62\1\0"+
    "\4\62\2\0\5\62\1\0\1\62\2\0\1\62\1\0"+
    "\23\62\1\0\1\62\2\0\1\62\4\0\1\62\1\0"+
    "\2\62\2\0\1\62\1\0\1\62\1\63\1\0\4\62"+
    "\2\0\5\62\1\0\1\62\2\0\1\62\1\0\23\62"+
    "\1\0\1\62\2\0\1\62\4\0\1\41\1\0\2\41"+
    "\2\0\1\41\1\0\1\41\1\42\1\43\4\41\1\107"+
    "\1\0\4\41\1\126\1\0\1\41\2\0\1\41\1\0"+
    "\23\41\1\0\1\41\2\0\1\41\4\0\1\41\1\0"+
    "\2\41\2\0\1\41\1\0\1\41\1\42\1\43\4\41"+
    "\1\107\1\0\5\41\1\0\1\41\2\0\1\41\1\0"+
    "\1\127\22\41\1\0\1\41\2\0\1\41\4\0\1\41"+
    "\1\0\2\41\2\0\1\41\1\0\1\41\1\42\1\43"+
    "\4\41\1\107\1\0\5\41\1\0\1\41\2\0\1\41"+
    "\1\0\13\41\1\130\7\41\1\0\1\41\2\0\1\41"+
    "\4\0\1\41\1\0\2\41\2\0\1\41\1\0\1\41"+
    "\1\42\1\43\4\41\1\107\1\0\5\41\1\0\1\41"+
    "\2\0\1\41\1\0\4\41\1\131\16\41\1\0\1\41"+
    "\2\0\1\41\4\0\1\41\1\0\2\41\2\0\1\41"+
    "\1\0\1\41\1\42\1\43\3\132\1\41\1\107\1\0"+
    "\5\41\1\0\1\41\2\0\1\41\1\0\23\41\1\0"+
    "\1\41\2\0\1\41\4\0\1\41\1\0\2\41\2\0"+
    "\1\41\1\0\1\41\1\42\1\43\4\41\1\107\1\0"+
    "\5\41\1\0\1\41\2\0\1\41\1\0\4\41\1\133"+
    "\16\41\1\0\1\41\2\0\1\41\4\0\1\41\1\0"+
    "\2\41\2\0\1\41\1\0\1\41\1\42\1\43\4\41"+
    "\1\107\1\0\5\41\1\0\1\41\2\0\1\41\1\0"+
    "\14\41\1\134\6\41\1\0\1\41\2\0\1\41\4\0"+
    "\1\41\1\0\2\41\2\0\1\41\1\0\1\41\1\42"+
    "\1\43\4\41\1\107\1\0\5\41\1\0\1\41\2\0"+
    "\1\41\1\0\1\135\22\41\1\0\1\41\2\0\1\41"+
    "\4\0\1\41\1\0\2\41\2\0\1\41\1\0\1\41"+
    "\1\42\1\43\4\136\1\107\1\0\1\41\3\136\1\41"+
    "\1\0\1\41\2\0\1\41\1\0\6\136\15\41\1\0"+
    "\1\41\2\0\1\41\4\0\1\41\1\0\2\41\2\0"+
    "\1\41\1\0\1\41\1\42\1\43\4\41\1\107\1\0"+
    "\5\41\1\0\1\41\2\0\1\41\1\0\10\41\1\137"+
    "\12\41\1\0\1\41\2\0\1\41\4\0\1\41\1\0"+
    "\2\41\2\0\1\41\1\0\1\41\1\42\1\43\4\41"+
    "\1\107\1\0\5\41\1\0\1\41\2\0\1\41\1\0"+
    "\10\41\1\140\12\41\1\0\1\41\2\0\1\41\4\0"+
    "\1\41\1\0\2\41\2\0\1\41\1\0\1\41\1\42"+
    "\1\43\4\41\1\107\1\0\5\41\1\0\1\41\2\0"+
    "\1\41\1\0\20\41\1\141\2\41\1\0\1\41\2\0"+
    "\1\41\4\0\1\142\1\0\2\142\2\0\1\142\1\0"+
    "\1\142\1\143\1\0\4\142\2\0\5\142\1\0\1\142"+
    "\2\0\1\142\1\0\23\142\1\0\1\142\2\0\1\142"+
    "\4\0\1\110\1\0\2\110\2\0\1\110\1\0\1\110"+
    "\1\111\1\0\4\110\1\144\1\0\5\110\1\0\1\110"+
    "\2\0\1\110\1\0\23\110\1\0\1\110\2\0\1\110"+
    "\4\0\1\110\1\0\2\110\2\0\1\110\1\0\2\110"+
    "\1\0\4\110\2\0\5\110\1\0\1\110\2\0\1\110"+
    "\1\0\23\110\1\0\1\110\2\0\1\110\4\0\1\41"+
    "\1\0\2\41\2\0\1\41\1\0\2\41\1\0\4\145"+
    "\2\0\3\41\1\113\1\41\1\0\1\41\2\0\1\41"+
    "\1\0\4\41\1\113\16\41\1\0\1\41\2\0\1\41"+
    "\4\0\1\41\1\0\2\41\2\0\1\146\1\0\1\146"+
    "\1\42\1\43\4\147\1\107\1\0\5\41\1\0\1\41"+
    "\2\0\1\41\1\0\23\41\1\0\1\41\2\0\1\41"+
    "\4\0\1\41\1\0\2\41\2\0\1\41\1\0\1\41"+
    "\1\42\1\43\2\150\2\41\1\107\1\0\5\41\1\0"+
    "\1\41\2\0\1\150\1\0\23\41\1\0\1\41\2\0"+
    "\1\41\4\0\1\41\1\0\2\41\2\0\1\41\1\0"+
    "\1\41\1\42\1\43\3\151\1\41\1\107\1\0\5\41"+
    "\1\0\1\41\2\0\1\151\1\0\23\41\1\0\1\41"+
    "\2\0\1\41\4\0\1\41\1\0\2\41\2\0\1\41"+
    "\1\0\1\41\1\42\1\43\4\152\1\107\1\0\1\41"+
    "\3\152\1\41\1\0\1\41\2\0\1\152\1\0\6\152"+
    "\15\41\1\0\1\41\2\0\1\152\17\0\4\120\51\0"+
    "\1\153\1\0\2\153\2\0\1\153\1\0\1\153\1\154"+
    "\1\0\4\153\2\0\5\153\1\0\1\153\2\0\1\153"+
    "\1\0\23\153\1\0\1\153\2\0\1\153\4\0\1\155"+
    "\1\0\2\155\2\0\1\155\1\0\1\155\1\156\1\0"+
    "\4\155\2\0\5\155\1\0\1\155\2\0\1\155\1\0"+
    "\23\155\1\0\1\155\2\0\1\155\4\0\1\41\1\0"+
    "\2\41\2\0\1\41\1\0\1\41\1\42\1\43\4\41"+
    "\1\107\1\0\5\41\1\0\1\41\2\0\1\41\1\0"+
    "\2\41\1\157\20\41\1\0\1\41\2\0\1\41\4\0"+
    "\1\41\1\0\2\41\2\0\1\41\1\0\1\41\1\42"+
    "\1\43\4\41\1\107\1\0\5\41\1\0\1\41\2\0"+
    "\1\41\1\0\15\41\1\160\5\41\1\0\1\41\2\0"+
    "\1\41\4\0\1\41\1\0\2\41\2\0\1\41\1\0"+
    "\1\41\1\42\1\43\4\41\1\107\1\0\5\41\1\0"+
    "\1\41\2\0\1\41\1\0\21\41\1\161\1\41\1\0"+
    "\1\41\2\0\1\41\4\0\1\41\1\0\2\41\2\0"+
    "\1\41\1\0\1\41\1\42\1\43\3\162\1\41\1\107"+
    "\1\0\5\41\1\0\1\41\2\0\1\41\1\0\23\41"+
    "\1\0\1\41\2\0\1\41\4\0\1\41\1\0\2\41"+
    "\2\0\1\41\1\0\1\41\1\42\1\43\4\41\1\107"+
    "\1\0\5\41\1\0\1\41\2\0\1\41\1\0\17\41"+
    "\1\163\3\41\1\0\1\41\2\0\1\41\4\0\1\41"+
    "\1\0\2\41\2\0\1\41\1\0\1\41\1\42\1\43"+
    "\4\41\1\107\1\0\5\41\1\0\1\41\2\0\1\41"+
    "\1\0\1\164\22\41\1\0\1\41\2\0\1\41\4\0"+
    "\1\41\1\0\2\41\2\0\1\41\1\0\1\41\1\42"+
    "\1\43\4\41\1\107\1\0\5\41\1\0\1\41\2\0"+
    "\1\41\1\0\1\41\1\67\21\41\1\0\1\41\2\0"+
    "\1\41\4\0\1\41\1\0\2\41\2\0\1\41\1\0"+
    "\1\41\1\42\1\43\4\165\1\107\1\0\1\41\3\165"+
    "\1\41\1\0\1\41\2\0\1\41\1\0\6\165\15\41"+
    "\1\0\1\41\2\0\1\41\4\0\1\41\1\0\2\41"+
    "\2\0\1\41\1\0\1\41\1\42\1\43\4\41\1\107"+
    "\1\0\5\41\1\0\1\41\2\0\1\41\1\0\16\41"+
    "\1\141\4\41\1\0\1\41\2\0\1\41\4\0\1\41"+
    "\1\0\2\41\2\0\1\41\1\0\1\41\1\42\1\43"+
    "\4\41\1\107\1\0\5\41\1\0\1\41\2\0\1\41"+
    "\1\0\4\41\1\166\16\41\1\0\1\41\2\0\1\41"+
    "\4\0\1\142\1\0\2\142\2\0\1\142\1\0\1\142"+
    "\1\143\1\43\4\142\2\0\5\142\1\0\1\167\2\0"+
    "\1\142\1\0\23\142\1\0\1\142\2\0\1\142\4\0"+
    "\1\142\1\0\2\142\2\0\1\142\1\0\2\142\1\0"+
    "\4\142\2\0\5\142\1\0\1\142\2\0\1\142\1\0"+
    "\23\142\1\0\1\142\2\0\1\142\4\0\1\170\1\0"+
    "\2\170\2\0\1\170\1\0\1\170\1\171\1\0\4\170"+
    "\2\0\5\170\1\0\1\170\2\0\1\170\1\0\23\170"+
    "\1\0\1\170\2\0\1\170\4\0\1\41\1\0\2\41"+
    "\2\0\1\41\1\0\1\41\1\42\1\43\4\145\1\107"+
    "\1\0\3\41\1\113\1\41\1\0\1\41\2\0\1\41"+
    "\1\0\4\41\1\113\16\41\1\0\1\41\2\0\1\41"+
    "\4\0\1\41\1\0\2\41\2\0\1\41\1\0\1\41"+
    "\1\42\1\43\4\147\1\107\1\0\5\41\1\0\1\41"+
    "\2\0\1\41\1\0\23\41\1\0\1\41\2\0\1\41"+
    "\4\0\1\153\1\0\2\153\2\0\1\153\1\0\1\153"+
    "\1\154\1\0\4\153\1\125\1\0\5\153\1\0\1\153"+
    "\2\0\1\153\1\0\23\153\1\0\1\153\2\0\1\153"+
    "\4\0\1\153\1\0\2\153\2\0\1\153\1\0\2\153"+
    "\1\0\4\153\2\0\5\153\1\0\1\153\2\0\1\153"+
    "\1\0\23\153\1\0\1\153\2\0\1\153\4\0\1\155"+
    "\1\0\2\155\2\0\1\155\1\0\2\155\1\0\4\155"+
    "\2\0\5\155\1\0\1\155\2\0\1\155\1\0\23\155"+
    "\1\0\1\155\2\0\1\155\4\0\1\41\1\0\2\41"+
    "\2\0\1\41\1\0\1\41\1\42\1\43\4\41\1\107"+
    "\1\0\5\41\1\0\1\41\2\0\1\41\1\0\7\41"+
    "\1\172\13\41\1\0\1\41\2\0\1\41\4\0\1\41"+
    "\1\0\2\41\2\0\1\41\1\0\1\41\1\42\1\43"+
    "\4\41\1\107\1\0\5\41\1\0\1\41\2\0\1\41"+
    "\1\0\11\41\1\173\11\41\1\0\1\41\2\0\1\41"+
    "\4\0\1\41\1\0\2\41\2\0\1\41\1\0\1\41"+
    "\1\42\1\43\4\41\1\107\1\0\5\41\1\0\1\41"+
    "\2\0\1\41\1\0\10\41\1\174\12\41\1\0\1\41"+
    "\2\0\1\41\4\0\1\41\1\0\2\41\2\0\1\41"+
    "\1\0\1\41\1\42\1\43\3\67\1\41\1\107\1\0"+
    "\5\41\1\0\1\41\2\0\1\41\1\0\23\41\1\0"+
    "\1\41\2\0\1\41\4\0\1\41\1\0\2\41\2\0"+
    "\1\41\1\0\1\41\1\42\1\43\4\41\1\107\1\0"+
    "\5\41\1\0\1\41\2\0\1\41\1\0\20\41\1\175"+
    "\2\41\1\0\1\41\2\0\1\41\4\0\1\41\1\0"+
    "\2\41\2\0\1\41\1\0\1\41\1\42\1\43\4\41"+
    "\1\107\1\0\5\41\1\0\1\41\2\0\1\41\1\0"+
    "\2\41\1\176\20\41\1\0\1\41\2\0\1\41\4\0"+
    "\1\41\1\0\2\41\2\0\1\41\1\0\1\41\1\42"+
    "\1\43\4\177\1\107\1\0\1\41\3\177\1\41\1\0"+
    "\1\41\2\0\1\41\1\0\6\177\15\41\1\0\1\41"+
    "\2\0\1\41\4\0\1\200\1\0\2\200\2\0\1\200"+
    "\1\0\1\200\1\201\1\43\4\200\2\0\5\200\1\0"+
    "\1\200\2\0\1\200\1\0\23\200\1\0\1\200\2\0"+
    "\1\200\4\0\1\170\1\0\2\170\2\0\1\170\1\0"+
    "\2\170\1\0\4\170\2\0\5\170\1\0\1\170\2\0"+
    "\1\170\1\0\23\170\1\0\1\170\2\0\1\170\4\0"+
    "\1\41\1\0\2\41\2\0\1\41\1\0\1\41\1\42"+
    "\1\43\4\41\1\107\1\0\5\41\1\0\1\41\2\0"+
    "\1\41\1\0\16\41\1\202\4\41\1\0\1\41\2\0"+
    "\1\41\4\0\1\41\1\0\2\41\2\0\1\41\1\0"+
    "\1\41\1\42\1\43\4\41\1\107\1\0\5\41\1\0"+
    "\1\41\2\0\1\41\1\0\5\41\1\203\15\41\1\0"+
    "\1\41\2\0\1\41\4\0\1\41\1\0\2\41\2\0"+
    "\1\41\1\0\1\41\1\42\1\43\4\41\1\107\1\0"+
    "\5\41\1\0\1\41\2\0\1\41\1\0\6\41\1\204"+
    "\14\41\1\0\1\41\2\0\1\41\4\0\1\41\1\0"+
    "\2\41\2\0\1\41\1\0\1\41\1\42\1\43\4\41"+
    "\1\107\1\0\5\41\1\0\1\41\2\0\1\41\1\0"+
    "\15\41\1\205\5\41\1\0\1\41\2\0\1\41\4\0"+
    "\1\41\1\0\2\41\2\0\1\41\1\0\1\41\1\42"+
    "\1\43\4\41\1\107\1\0\5\41\1\0\1\41\2\0"+
    "\1\41\1\0\4\41\1\67\16\41\1\0\1\41\2\0"+
    "\1\41\4\0\1\41\1\0\2\41\2\0\1\41\1\0"+
    "\1\41\1\42\1\43\4\67\1\107\1\0\1\41\3\67"+
    "\1\41\1\0\1\41\2\0\1\41\1\0\6\67\15\41"+
    "\1\0\1\41\2\0\1\41\4\0\1\200\1\0\2\200"+
    "\2\0\1\200\1\0\1\200\1\201\1\43\4\200\1\144"+
    "\1\0\5\200\1\0\1\200\2\0\1\200\1\0\23\200"+
    "\1\0\1\200\2\0\1\200\4\0\1\200\1\0\2\200"+
    "\2\0\1\200\1\0\2\200\1\0\4\200\2\0\5\200"+
    "\1\0\1\200\2\0\1\200\1\0\23\200\1\0\1\200"+
    "\2\0\1\200\4\0\1\41\1\0\2\41\2\0\1\41"+
    "\1\0\1\41\1\42\1\43\4\41\1\107\1\0\5\41"+
    "\1\0\1\41\2\0\1\41\1\0\4\41\1\206\16\41"+
    "\1\0\1\41\2\0\1\41\4\0\1\41\1\0\2\41"+
    "\2\0\1\41\1\0\1\41\1\42\1\43\4\41\1\107"+
    "\1\0\5\41\1\0\1\41\2\0\1\41\1\0\12\41"+
    "\1\176\10\41\1\0\1\41\2\0\1\41\4\0\1\41"+
    "\1\0\2\41\2\0\1\41\1\0\1\41\1\42\1\43"+
    "\4\41\1\107\1\0\5\41\1\0\1\41\2\0\1\41"+
    "\1\0\12\41\1\67\10\41\1\0\1\41\2\0\1\41"+
    "\4\0\1\41\1\0\2\41\2\0\1\41\1\0\1\41"+
    "\1\42\1\43\4\41\1\107\1\0\5\41\1\0\1\41"+
    "\2\0\1\41\1\0\4\41\1\207\16\41\1\0\1\41"+
    "\2\0\1\41\4\0\1\41\1\0\2\41\2\0\1\41"+
    "\1\0\1\41\1\42\1\43\4\41\1\107\1\0\5\41"+
    "\1\0\1\41\2\0\1\41\1\0\3\41\1\67\17\41"+
    "\1\0\1\41\2\0\1\41\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5544];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\3\11\11\1\1\11\1\1\3\11"+
    "\3\1\2\11\1\1\1\11\2\1\2\0\1\11\1\0"+
    "\2\11\2\1\2\11\2\1\4\0\1\1\1\0\2\1"+
    "\1\11\16\1\2\11\1\0\1\1\1\0\5\1\1\0"+
    "\4\1\2\0\15\1\2\0\7\1\1\0\1\1\1\0"+
    "\12\1\1\0\7\1\1\0\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 37: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 38: break;
          case 3:
            { return PhelTypes.SYM;
            }
          // fall through
          case 39: break;
          case 4:
            { return PhelTypes.LINE_COMMENT;
            }
          // fall through
          case 40: break;
          case 5:
            { return PhelTypes.QUOTE;
            }
          // fall through
          case 41: break;
          case 6:
            { return PhelTypes.PAREN1;
            }
          // fall through
          case 42: break;
          case 7:
            { return PhelTypes.PAREN2;
            }
          // fall through
          case 43: break;
          case 8:
            { return PhelTypes.COMMA;
            }
          // fall through
          case 44: break;
          case 9:
            { return PhelTypes.DOT;
            }
          // fall through
          case 45: break;
          case 10:
            { return PhelTypes.SLASH;
            }
          // fall through
          case 46: break;
          case 11:
            { return PhelTypes.NUMBER;
            }
          // fall through
          case 47: break;
          case 12:
            { return PhelTypes.COLON;
            }
          // fall through
          case 48: break;
          case 13:
            { return PhelTypes.BRACKET1;
            }
          // fall through
          case 49: break;
          case 14:
            { return PhelTypes.BRACKET2;
            }
          // fall through
          case 50: break;
          case 15:
            { return PhelTypes.HAT;
            }
          // fall through
          case 51: break;
          case 16:
            { return PhelTypes.SYNTAX_QUOTE;
            }
          // fall through
          case 52: break;
          case 17:
            { return PhelTypes.BRACE1;
            }
          // fall through
          case 53: break;
          case 18:
            { return PhelTypes.BRACE2;
            }
          // fall through
          case 54: break;
          case 19:
            { return PhelTypes.TILDE;
            }
          // fall through
          case 55: break;
          case 20:
            { return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 56: break;
          case 21:
            { return PhelTypes.STRING;
            }
          // fall through
          case 57: break;
          case 22:
            { return PhelTypes.FORM_COMMENT;
            }
          // fall through
          case 58: break;
          case 23:
            { yybegin(MULTILINE_COMMENT); return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 59: break;
          case 24:
            { return PhelTypes.COMMA_AT;
            }
          // fall through
          case 60: break;
          case 25:
            { return PhelTypes.DOTDASH;
            }
          // fall through
          case 61: break;
          case 26:
            { return PhelTypes.KEYWORD_TOKEN;
            }
          // fall through
          case 62: break;
          case 27:
            { return PhelTypes.COLONCOLON;
            }
          // fall through
          case 63: break;
          case 28:
            { return PhelTypes.CHAR;
            }
          // fall through
          case 64: break;
          case 29:
            { return PhelTypes.TILDE_AT;
            }
          // fall through
          case 65: break;
          case 30:
            { yybegin(YYINITIAL); return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 66: break;
          case 31:
            { return PhelTypes.BINNUM;
            }
          // fall through
          case 67: break;
          case 32:
            { return PhelTypes.OCTNUM;
            }
          // fall through
          case 68: break;
          case 33:
            { return PhelTypes.HEXNUM;
            }
          // fall through
          case 69: break;
          case 34:
            { return PhelTypes.NAN;
            }
          // fall through
          case 70: break;
          case 35:
            { return PhelTypes.NIL;
            }
          // fall through
          case 71: break;
          case 36:
            { return PhelTypes.BOOL;
            }
          // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/kotlin/org/phellang/language/Phel.flex

package org.phellang.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.phellang.language.psi.PhelTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


public class PhelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\3\0\1\6\1\7\1\10\1\0\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\6\20\2\21"+
    "\1\22\1\23\4\0\1\24\1\25\3\26\1\27\1\26"+
    "\7\0\1\30\14\0\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\2\0"+
    "\1\45\1\0\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\0\1\54\1\55\1\56\1\57\1\0\1\60\1\61"+
    "\2\0\1\62\1\63\1\64\1\65\6\0\1\3\32\0"+
    "\1\66\u01bf\0\12\67\206\0\12\67\306\0\12\67\234\0"+
    "\12\67\166\0\12\67\140\0\12\67\166\0\12\67\106\0"+
    "\12\67\u0116\0\12\67\106\0\12\67\346\0\1\66\u015f\0"+
    "\12\67\46\0\12\67\u012c\0\12\67\200\0\12\67\246\0"+
    "\12\67\6\0\12\67\266\0\12\67\126\0\12\67\206\0"+
    "\12\67\6\0\12\67\246\0\13\66\35\0\2\3\5\0"+
    "\1\66\57\0\1\66\240\0\1\66\u01cf\0\12\67\46\0"+
    "\12\67\306\0\12\67\26\0\12\67\126\0\12\67\u0196\0"+
    "\12\67\6\0\u0100\70\240\0\12\67\206\0\12\67\u012c\0"+
    "\12\67\200\0\12\67\74\0\12\67\220\0\12\67\166\0"+
    "\12\67\146\0\12\67\206\0\12\67\106\0\12\67\266\0"+
    "\12\67\u0164\0\62\67\100\0\12\67\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\2\13\1\14\1\4\1\3"+
    "\1\1\1\15\1\1\1\16\1\17\1\20\3\1\1\21"+
    "\1\1\1\22\1\23\2\24\1\3\1\25\1\1\1\4"+
    "\1\26\1\27\1\30\1\31\1\32\1\13\4\1\1\33"+
    "\1\34\1\1\12\35\3\1\1\36\1\37\1\40\1\25"+
    "\1\0\1\1\1\13\1\41\1\42\1\43\1\44\11\1"+
    "\1\45\10\1\1\46\14\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u018f\0\u018f\0\u01c8\0\u0201\0\u023a\0\162\0\u0273\0\u02ac"+
    "\0\u02e5\0\u031e\0\u018f\0\u0357\0\u018f\0\u0390\0\u018f\0\162"+
    "\0\u018f\0\u03c9\0\u0402\0\u043b\0\u018f\0\u0474\0\u018f\0\u04ad"+
    "\0\u018f\0\u04e6\0\u051f\0\162\0\u0558\0\u0591\0\u018f\0\u018f"+
    "\0\u018f\0\u018f\0\162\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\u06e7\0\u0720\0\162\0\u018f\0\u0759\0\u0792\0\u07cb"+
    "\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993"+
    "\0\u018f\0\u018f\0\u018f\0\u018f\0\u09cc\0\u0a05\0\u0a05\0\u063c"+
    "\0\u0675\0\u06ae\0\162\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\162\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\162\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0876\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u1041";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\13\1\15\1\16\1\17\3\20\1\21"+
    "\1\22\1\23\3\3\1\24\1\25\1\26\1\27\1\30"+
    "\1\3\1\31\5\3\1\32\4\3\1\33\4\3\1\34"+
    "\3\3\1\35\1\36\1\37\1\40\1\5\2\3\63\41"+
    "\1\42\5\41\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\2\3\1\0"+
    "\23\3\1\0\1\3\1\0\4\3\1\0\3\4\62\0"+
    "\1\4\2\0\1\3\2\4\1\5\1\3\4\0\1\3"+
    "\1\0\11\3\1\0\4\3\1\0\1\3\1\0\2\3"+
    "\1\0\23\3\1\0\1\3\1\0\1\3\1\5\2\3"+
    "\1\6\2\43\1\6\1\44\4\43\1\6\1\43\11\6"+
    "\1\43\4\6\1\43\1\45\1\43\2\6\1\43\23\6"+
    "\1\43\1\6\1\43\4\6\35\46\1\47\24\46\1\50"+
    "\1\51\5\46\71\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\3\3\1\17\3\20\2\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\23\3\1\0\1\3\1\0"+
    "\4\3\24\0\1\52\44\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\1\53\10\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\23\3\1\0\1\3\1\0\5\3"+
    "\2\0\2\3\4\0\1\3\1\0\1\3\1\54\1\3"+
    "\4\20\2\3\1\0\2\3\1\55\1\3\1\0\1\3"+
    "\1\0\2\3\1\0\1\3\1\56\2\3\1\55\6\3"+
    "\1\57\6\3\1\60\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\1\3\1\54\1\3\4\20"+
    "\2\3\1\0\2\3\1\55\1\3\1\0\1\3\1\0"+
    "\2\3\1\0\4\3\1\55\16\3\1\0\1\3\1\0"+
    "\4\3\1\61\2\0\2\61\4\0\1\61\1\0\7\61"+
    "\1\62\1\61\1\0\4\61\1\0\1\61\1\0\2\61"+
    "\1\0\23\61\1\0\1\61\1\0\4\61\1\22\1\46"+
    "\1\0\1\3\1\22\4\46\1\22\1\46\11\22\1\46"+
    "\4\22\1\46\1\22\1\46\2\22\1\46\23\22\1\46"+
    "\1\22\1\46\3\22\2\3\2\0\2\3\4\0\1\3"+
    "\1\0\11\3\1\0\1\63\3\3\1\0\1\3\1\0"+
    "\2\3\1\0\23\3\1\0\1\3\1\0\4\3\1\64"+
    "\1\65\1\0\1\3\1\64\4\65\1\64\1\65\11\64"+
    "\1\65\4\64\1\65\1\64\1\65\2\64\1\65\1\64"+
    "\1\66\3\64\1\67\4\64\1\70\1\71\1\64\1\72"+
    "\1\73\1\74\1\75\2\64\1\65\1\64\1\65\3\64"+
    "\2\3\2\0\2\3\4\0\1\3\1\0\11\3\1\0"+
    "\4\3\1\0\1\3\1\0\2\3\1\0\1\76\22\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\11\3\1\0\4\3\1\0\1\3\1\0\2\3"+
    "\1\0\6\3\1\77\14\3\1\0\1\3\1\0\5\3"+
    "\2\0\2\3\4\0\1\3\1\0\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\15\3\1\100\5\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\2\0\1\101"+
    "\1\0\1\3\1\0\11\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\23\3\1\0\1\3\1\0\5\3"+
    "\2\0\2\3\4\0\1\3\1\0\11\3\1\102\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\23\3\1\0\1\3"+
    "\1\0\4\3\5\0\1\103\63\0\4\43\1\104\25\43"+
    "\1\105\36\43\1\6\1\43\1\0\1\3\1\6\4\43"+
    "\1\6\1\43\11\6\1\43\4\6\1\43\1\6\1\43"+
    "\2\6\1\43\23\6\1\43\1\6\1\43\3\6\1\3"+
    "\2\46\2\0\64\46\1\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\3\3\4\54\2\3\1\0\2\3\1\55"+
    "\1\3\1\0\1\3\1\0\2\3\1\0\4\3\1\55"+
    "\16\3\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\106\1\0\1\106\2\3\4\107\2\3\1\0\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\23\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\3\3"+
    "\2\110\4\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\1\110\1\0\23\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\3\3\3\111\3\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\1\111\1\0\23\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\3\3\4\112\2\3\1\0\3\112\1\3\1\0"+
    "\1\3\1\0\1\3\1\112\1\0\6\112\15\3\1\0"+
    "\1\3\1\0\2\3\1\112\1\3\1\61\2\0\2\61"+
    "\4\0\1\61\1\0\11\61\1\0\4\61\1\0\1\61"+
    "\1\0\2\61\1\0\23\61\1\0\1\61\1\0\4\61"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\11\3\1\0"+
    "\3\3\1\113\1\0\1\3\1\0\2\3\1\0\23\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\11\3\1\0\4\3\1\0\1\3\1\0\2\3"+
    "\1\0\1\114\22\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\13\3\1\115\7\3\1\0"+
    "\1\3\1\0\5\3\2\0\2\3\4\0\1\3\1\0"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\2\3\1\0"+
    "\4\3\1\116\16\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\3\3\3\117\3\3\1\0"+
    "\4\3\1\0\1\3\1\0\2\3\1\0\23\3\1\0"+
    "\1\3\1\0\5\3\2\0\2\3\4\0\1\3\1\0"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\2\3\1\0"+
    "\4\3\1\120\16\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\14\3\1\121\6\3\1\0"+
    "\1\3\1\0\5\3\2\0\2\3\4\0\1\3\1\0"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\2\3\1\0"+
    "\1\122\22\3\1\0\1\3\1\0\5\3\2\0\2\3"+
    "\4\0\1\3\1\0\3\3\4\123\2\3\1\0\3\123"+
    "\1\3\1\0\1\3\1\0\2\3\1\0\6\123\15\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\11\3\1\0\4\3\1\0\1\3\1\0\2\3"+
    "\1\0\10\3\1\124\12\3\1\0\1\3\1\0\5\3"+
    "\2\0\2\3\4\0\1\3\1\0\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\10\3\1\125\12\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\11\3\1\0\4\3\1\0\1\3\1\0\2\3"+
    "\1\0\20\3\1\126\2\3\1\0\1\3\1\0\4\3"+
    "\2\43\2\0\64\43\1\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\3\3\4\107\2\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\23\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\11\3\1\0"+
    "\4\3\1\0\1\3\1\0\2\3\1\0\2\3\1\127"+
    "\20\3\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\3\1\0\11\3\1\0\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\15\3\1\130\5\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\11\3\1\0"+
    "\4\3\1\0\1\3\1\0\2\3\1\0\21\3\1\131"+
    "\1\3\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\3\1\0\3\3\3\132\3\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\23\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\11\3\1\0"+
    "\4\3\1\0\1\3\1\0\2\3\1\0\17\3\1\133"+
    "\3\3\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\3\1\0\11\3\1\0\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\1\134\22\3\1\0\1\3\1\0\5\3"+
    "\2\0\2\3\4\0\1\3\1\0\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\1\3\1\64\21\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\3\3\4\135\2\3\1\0\3\135\1\3\1\0"+
    "\1\3\1\0\2\3\1\0\6\135\15\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\2\3\1\0\16\3"+
    "\1\126\4\3\1\0\1\3\1\0\5\3\2\0\2\3"+
    "\4\0\1\3\1\0\11\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\4\3\1\136\16\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\2\3\1\0\7\3"+
    "\1\137\13\3\1\0\1\3\1\0\5\3\2\0\2\3"+
    "\4\0\1\3\1\0\11\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\11\3\1\140\11\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\2\3\1\0\10\3"+
    "\1\141\12\3\1\0\1\3\1\0\5\3\2\0\2\3"+
    "\4\0\1\3\1\0\3\3\3\64\3\3\1\0\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\23\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\2\3\1\0\20\3"+
    "\1\142\2\3\1\0\1\3\1\0\5\3\2\0\2\3"+
    "\4\0\1\3\1\0\11\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\2\3\1\143\20\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\3\3"+
    "\4\144\2\3\1\0\3\144\1\3\1\0\1\3\1\0"+
    "\2\3\1\0\6\144\15\3\1\0\1\3\1\0\5\3"+
    "\2\0\2\3\4\0\1\3\1\0\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\16\3\1\145\4\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\11\3\1\0\4\3\1\0\1\3\1\0\2\3"+
    "\1\0\5\3\1\146\15\3\1\0\1\3\1\0\5\3"+
    "\2\0\2\3\4\0\1\3\1\0\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\6\3\1\147\14\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\11\3\1\0\4\3\1\0\1\3\1\0\2\3"+
    "\1\0\15\3\1\150\5\3\1\0\1\3\1\0\5\3"+
    "\2\0\2\3\4\0\1\3\1\0\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\4\3\1\64\16\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\3\3\4\64\2\3\1\0\3\64\1\3\1\0"+
    "\1\3\1\0\2\3\1\0\6\64\15\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\2\3\1\0\4\3"+
    "\1\151\16\3\1\0\1\3\1\0\5\3\2\0\2\3"+
    "\4\0\1\3\1\0\11\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\12\3\1\143\10\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\2\3\1\0\12\3"+
    "\1\64\10\3\1\0\1\3\1\0\5\3\2\0\2\3"+
    "\4\0\1\3\1\0\11\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\4\3\1\152\16\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\2\3\1\0\3\3"+
    "\1\64\17\3\1\0\1\3\1\0\4\3";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4218];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\5\1\3\11\10\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\3\1\1\11\1\1\1\11\1\1"+
    "\1\11\5\1\4\11\12\1\1\11\13\1\4\11\1\0"+
    "\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PhelTypes.SYM;
            }
          // fall through
          case 39: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 40: break;
          case 3:
            { return BAD_CHARACTER;
            }
          // fall through
          case 41: break;
          case 4:
            { return PhelTypes.LINE_COMMENT;
            }
          // fall through
          case 42: break;
          case 5:
            { return PhelTypes.QUOTE;
            }
          // fall through
          case 43: break;
          case 6:
            { return PhelTypes.PAREN1;
            }
          // fall through
          case 44: break;
          case 7:
            { return PhelTypes.PAREN2;
            }
          // fall through
          case 45: break;
          case 8:
            { return PhelTypes.COMMA;
            }
          // fall through
          case 46: break;
          case 9:
            { return PhelTypes.DOT;
            }
          // fall through
          case 47: break;
          case 10:
            { return PhelTypes.SLASH;
            }
          // fall through
          case 48: break;
          case 11:
            { return PhelTypes.NUMBER;
            }
          // fall through
          case 49: break;
          case 12:
            { return PhelTypes.COLON;
            }
          // fall through
          case 50: break;
          case 13:
            { return PhelTypes.BRACKET1;
            }
          // fall through
          case 51: break;
          case 14:
            { return PhelTypes.BRACKET2;
            }
          // fall through
          case 52: break;
          case 15:
            { return PhelTypes.HAT;
            }
          // fall through
          case 53: break;
          case 16:
            { return PhelTypes.SYNTAX_QUOTE;
            }
          // fall through
          case 54: break;
          case 17:
            { return PhelTypes.BRACE1;
            }
          // fall through
          case 55: break;
          case 18:
            { return PhelTypes.BRACE2;
            }
          // fall through
          case 56: break;
          case 19:
            { return PhelTypes.TILDE;
            }
          // fall through
          case 57: break;
          case 20:
            { return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 58: break;
          case 21:
            { return PhelTypes.STRING;
            }
          // fall through
          case 59: break;
          case 22:
            { return PhelTypes.FORM_COMMENT;
            }
          // fall through
          case 60: break;
          case 23:
            { return PhelTypes.HASH_BRACE;
            }
          // fall through
          case 61: break;
          case 24:
            { yybegin(MULTILINE_COMMENT); return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 62: break;
          case 25:
            { return PhelTypes.COMMA_AT;
            }
          // fall through
          case 63: break;
          case 26:
            { return PhelTypes.DOTDASH;
            }
          // fall through
          case 64: break;
          case 27:
            { return PhelTypes.KEYWORD_TOKEN;
            }
          // fall through
          case 65: break;
          case 28:
            { return PhelTypes.COLONCOLON;
            }
          // fall through
          case 66: break;
          case 29:
            { return PhelTypes.CHAR;
            }
          // fall through
          case 67: break;
          case 30:
            { return PhelTypes.FN_SHORT;
            }
          // fall through
          case 68: break;
          case 31:
            { return PhelTypes.TILDE_AT;
            }
          // fall through
          case 69: break;
          case 32:
            { yybegin(YYINITIAL); return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 70: break;
          case 33:
            { return PhelTypes.BINNUM;
            }
          // fall through
          case 71: break;
          case 34:
            { return PhelTypes.OCTNUM;
            }
          // fall through
          case 72: break;
          case 35:
            { return PhelTypes.HEXNUM;
            }
          // fall through
          case 73: break;
          case 36:
            { return PhelTypes.NAN;
            }
          // fall through
          case 74: break;
          case 37:
            { return PhelTypes.NIL;
            }
          // fall through
          case 75: break;
          case 38:
            { return PhelTypes.BOOL;
            }
          // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

;; Error Handling Test - Cases that ACTUALLY trigger error messages
;; These test cases are designed to trigger the error handling system

(ns test-error-triggering)

;; === TEST 1: Truly broken PSI structure ===
;; This should trigger PSI tree issues
(defn 
;; Position cursor RIGHT after defn with no space: |

;; === TEST 2: Malformed brackets that break PSI parsing ===  
;; This should trigger malformed syntax detection
([})]
;; Position cursor after malformed brackets: |

;; === TEST 3: Deeply nested to hit MAX_DEPTH protection ===
;; This should trigger depth limit protection
(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
;; Position cursor in extremely deep nesting: |

;; === TEST 4: NULL PSI context ===
;; Create a context where PSI elements might be null
#{[
;; Position cursor after invalid set/vector combination: |

;; === TEST 5: Invalid function call that breaks context detection ===
;; Numbers as function names should break context detection
(123456789 
;; Position cursor after numeric "function": |

;; === TEST 6: Broken string literals ===
;; Incomplete strings can cause PSI parsing issues  
"unterminated string
;; Position cursor in broken string: |

;; === TEST 7: Mixed brackets that confuse PSI parser ===
;; This creates PSI tree confusion
([)]
;; Position cursor in mixed bracket confusion: |

;; === TEST 8: Too many closing brackets ===  
;; This creates PSI parsing errors
)))))))
;; Position cursor after excessive closing brackets: |

;; === TEST 9: Invalid characters in function position ===
;; Special characters that break function name detection
(@#$% 
;; Position cursor after invalid function name: |

;; === TEST 10: Circular reference attempt ===
;; Try to create a structure that might cause traversal issues
(let [a a] a |)

;; ALTERNATIVE TEST - Position completion in completely empty context
;; Put cursor on a blank line and trigger completion: |


;; WORKING TEST - These SHOULD show normal completions (not errors):
(defn working-function [param1 param2]
  ;; This should show normal expression completions: |
  )

(filter 
  ;; This should show predicate functions: |
  [1 2 3])

(let [x 42]
  ;; This should show local variables: |
  )

